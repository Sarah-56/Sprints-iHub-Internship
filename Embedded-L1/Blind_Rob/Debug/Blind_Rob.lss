
Blind_Rob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800200  00002ac6  00002b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c6  00800320  00800320  00002c7a  2**0
                  ALLOC
  3 .stab         00003a38  00000000  00000000  00002c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002762  00000000  00000000  000066b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00008e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000104  00000000  00000000  00008ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010ce  00000000  00000000  00008fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009db  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000897  00000000  00000000  0000aa83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  0000b31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000247  00000000  00000000  0000b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000408  00000000  00000000  0000b623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_29>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ec       	ldi	r30, 0xC6	; 198
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 32       	cpi	r26, 0x20	; 32
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	15 e0       	ldi	r17, 0x05	; 5
     110:	a0 e2       	ldi	r26, 0x20	; 32
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 3e       	cpi	r26, 0xE6	; 230
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 bb 14 	call	0x2976	; 0x2976 <main>
     122:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__divsf3>:
     12a:	a8 e1       	ldi	r26, 0x18	; 24
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	eb e9       	ldi	r30, 0x9B	; 155
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x10>
     136:	69 83       	std	Y+1, r22	; 0x01
     138:	7a 83       	std	Y+2, r23	; 0x02
     13a:	8b 83       	std	Y+3, r24	; 0x03
     13c:	9c 83       	std	Y+4, r25	; 0x04
     13e:	2d 83       	std	Y+5, r18	; 0x05
     140:	3e 83       	std	Y+6, r19	; 0x06
     142:	4f 83       	std	Y+7, r20	; 0x07
     144:	58 87       	std	Y+8, r21	; 0x08
     146:	b9 e0       	ldi	r27, 0x09	; 9
     148:	eb 2e       	mov	r14, r27
     14a:	f1 2c       	mov	r15, r1
     14c:	ec 0e       	add	r14, r28
     14e:	fd 1e       	adc	r15, r29
     150:	ce 01       	movw	r24, r28
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	b7 01       	movw	r22, r14
     156:	0e 94 32 03 	call	0x664	; 0x664 <__unpack_f>
     15a:	8e 01       	movw	r16, r28
     15c:	0f 5e       	subi	r16, 0xEF	; 239
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	ce 01       	movw	r24, r28
     162:	05 96       	adiw	r24, 0x05	; 5
     164:	b8 01       	movw	r22, r16
     166:	0e 94 32 03 	call	0x664	; 0x664 <__unpack_f>
     16a:	29 85       	ldd	r18, Y+9	; 0x09
     16c:	22 30       	cpi	r18, 0x02	; 2
     16e:	08 f4       	brcc	.+2      	; 0x172 <__divsf3+0x48>
     170:	7e c0       	rjmp	.+252    	; 0x26e <__divsf3+0x144>
     172:	39 89       	ldd	r19, Y+17	; 0x11
     174:	32 30       	cpi	r19, 0x02	; 2
     176:	10 f4       	brcc	.+4      	; 0x17c <__divsf3+0x52>
     178:	b8 01       	movw	r22, r16
     17a:	7c c0       	rjmp	.+248    	; 0x274 <__divsf3+0x14a>
     17c:	8a 85       	ldd	r24, Y+10	; 0x0a
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	89 27       	eor	r24, r25
     182:	8a 87       	std	Y+10, r24	; 0x0a
     184:	24 30       	cpi	r18, 0x04	; 4
     186:	11 f0       	breq	.+4      	; 0x18c <__divsf3+0x62>
     188:	22 30       	cpi	r18, 0x02	; 2
     18a:	31 f4       	brne	.+12     	; 0x198 <__divsf3+0x6e>
     18c:	23 17       	cp	r18, r19
     18e:	09 f0       	breq	.+2      	; 0x192 <__divsf3+0x68>
     190:	6e c0       	rjmp	.+220    	; 0x26e <__divsf3+0x144>
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	72 e0       	ldi	r23, 0x02	; 2
     196:	6e c0       	rjmp	.+220    	; 0x274 <__divsf3+0x14a>
     198:	34 30       	cpi	r19, 0x04	; 4
     19a:	39 f4       	brne	.+14     	; 0x1aa <__divsf3+0x80>
     19c:	1d 86       	std	Y+13, r1	; 0x0d
     19e:	1e 86       	std	Y+14, r1	; 0x0e
     1a0:	1f 86       	std	Y+15, r1	; 0x0f
     1a2:	18 8a       	std	Y+16, r1	; 0x10
     1a4:	1c 86       	std	Y+12, r1	; 0x0c
     1a6:	1b 86       	std	Y+11, r1	; 0x0b
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__divsf3+0x88>
     1aa:	32 30       	cpi	r19, 0x02	; 2
     1ac:	21 f4       	brne	.+8      	; 0x1b6 <__divsf3+0x8c>
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	89 87       	std	Y+9, r24	; 0x09
     1b2:	b7 01       	movw	r22, r14
     1b4:	5f c0       	rjmp	.+190    	; 0x274 <__divsf3+0x14a>
     1b6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1b8:	3c 85       	ldd	r19, Y+12	; 0x0c
     1ba:	8b 89       	ldd	r24, Y+19	; 0x13
     1bc:	9c 89       	ldd	r25, Y+20	; 0x14
     1be:	28 1b       	sub	r18, r24
     1c0:	39 0b       	sbc	r19, r25
     1c2:	3c 87       	std	Y+12, r19	; 0x0c
     1c4:	2b 87       	std	Y+11, r18	; 0x0b
     1c6:	ed 84       	ldd	r14, Y+13	; 0x0d
     1c8:	fe 84       	ldd	r15, Y+14	; 0x0e
     1ca:	0f 85       	ldd	r16, Y+15	; 0x0f
     1cc:	18 89       	ldd	r17, Y+16	; 0x10
     1ce:	ad 88       	ldd	r10, Y+21	; 0x15
     1d0:	be 88       	ldd	r11, Y+22	; 0x16
     1d2:	cf 88       	ldd	r12, Y+23	; 0x17
     1d4:	d8 8c       	ldd	r13, Y+24	; 0x18
     1d6:	ea 14       	cp	r14, r10
     1d8:	fb 04       	cpc	r15, r11
     1da:	0c 05       	cpc	r16, r12
     1dc:	1d 05       	cpc	r17, r13
     1de:	40 f4       	brcc	.+16     	; 0x1f0 <__divsf3+0xc6>
     1e0:	ee 0c       	add	r14, r14
     1e2:	ff 1c       	adc	r15, r15
     1e4:	00 1f       	adc	r16, r16
     1e6:	11 1f       	adc	r17, r17
     1e8:	21 50       	subi	r18, 0x01	; 1
     1ea:	30 40       	sbci	r19, 0x00	; 0
     1ec:	3c 87       	std	Y+12, r19	; 0x0c
     1ee:	2b 87       	std	Y+11, r18	; 0x0b
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e0       	ldi	r20, 0x00	; 0
     1f6:	50 e0       	ldi	r21, 0x00	; 0
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e4       	ldi	r27, 0x40	; 64
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	ea 14       	cp	r14, r10
     206:	fb 04       	cpc	r15, r11
     208:	0c 05       	cpc	r16, r12
     20a:	1d 05       	cpc	r17, r13
     20c:	40 f0       	brcs	.+16     	; 0x21e <__divsf3+0xf4>
     20e:	28 2b       	or	r18, r24
     210:	39 2b       	or	r19, r25
     212:	4a 2b       	or	r20, r26
     214:	5b 2b       	or	r21, r27
     216:	ea 18       	sub	r14, r10
     218:	fb 08       	sbc	r15, r11
     21a:	0c 09       	sbc	r16, r12
     21c:	1d 09       	sbc	r17, r13
     21e:	b6 95       	lsr	r27
     220:	a7 95       	ror	r26
     222:	97 95       	ror	r25
     224:	87 95       	ror	r24
     226:	ee 0c       	add	r14, r14
     228:	ff 1c       	adc	r15, r15
     22a:	00 1f       	adc	r16, r16
     22c:	11 1f       	adc	r17, r17
     22e:	6f 5f       	subi	r22, 0xFF	; 255
     230:	7f 4f       	sbci	r23, 0xFF	; 255
     232:	6f 31       	cpi	r22, 0x1F	; 31
     234:	71 05       	cpc	r23, r1
     236:	31 f7       	brne	.-52     	; 0x204 <__divsf3+0xda>
     238:	da 01       	movw	r26, r20
     23a:	c9 01       	movw	r24, r18
     23c:	8f 77       	andi	r24, 0x7F	; 127
     23e:	90 70       	andi	r25, 0x00	; 0
     240:	a0 70       	andi	r26, 0x00	; 0
     242:	b0 70       	andi	r27, 0x00	; 0
     244:	80 34       	cpi	r24, 0x40	; 64
     246:	91 05       	cpc	r25, r1
     248:	a1 05       	cpc	r26, r1
     24a:	b1 05       	cpc	r27, r1
     24c:	61 f4       	brne	.+24     	; 0x266 <__divsf3+0x13c>
     24e:	27 fd       	sbrc	r18, 7
     250:	0a c0       	rjmp	.+20     	; 0x266 <__divsf3+0x13c>
     252:	e1 14       	cp	r14, r1
     254:	f1 04       	cpc	r15, r1
     256:	01 05       	cpc	r16, r1
     258:	11 05       	cpc	r17, r1
     25a:	29 f0       	breq	.+10     	; 0x266 <__divsf3+0x13c>
     25c:	20 5c       	subi	r18, 0xC0	; 192
     25e:	3f 4f       	sbci	r19, 0xFF	; 255
     260:	4f 4f       	sbci	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	20 78       	andi	r18, 0x80	; 128
     266:	2d 87       	std	Y+13, r18	; 0x0d
     268:	3e 87       	std	Y+14, r19	; 0x0e
     26a:	4f 87       	std	Y+15, r20	; 0x0f
     26c:	58 8b       	std	Y+16, r21	; 0x10
     26e:	be 01       	movw	r22, r28
     270:	67 5f       	subi	r22, 0xF7	; 247
     272:	7f 4f       	sbci	r23, 0xFF	; 255
     274:	cb 01       	movw	r24, r22
     276:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__pack_f>
     27a:	68 96       	adiw	r28, 0x18	; 24
     27c:	ea e0       	ldi	r30, 0x0A	; 10
     27e:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x10>

00000282 <__fixsfsi>:
     282:	ac e0       	ldi	r26, 0x0C	; 12
     284:	b0 e0       	ldi	r27, 0x00	; 0
     286:	e7 e4       	ldi	r30, 0x47	; 71
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__prologue_saves__+0x20>
     28e:	69 83       	std	Y+1, r22	; 0x01
     290:	7a 83       	std	Y+2, r23	; 0x02
     292:	8b 83       	std	Y+3, r24	; 0x03
     294:	9c 83       	std	Y+4, r25	; 0x04
     296:	ce 01       	movw	r24, r28
     298:	01 96       	adiw	r24, 0x01	; 1
     29a:	be 01       	movw	r22, r28
     29c:	6b 5f       	subi	r22, 0xFB	; 251
     29e:	7f 4f       	sbci	r23, 0xFF	; 255
     2a0:	0e 94 32 03 	call	0x664	; 0x664 <__unpack_f>
     2a4:	8d 81       	ldd	r24, Y+5	; 0x05
     2a6:	82 30       	cpi	r24, 0x02	; 2
     2a8:	61 f1       	breq	.+88     	; 0x302 <__fixsfsi+0x80>
     2aa:	82 30       	cpi	r24, 0x02	; 2
     2ac:	50 f1       	brcs	.+84     	; 0x302 <__fixsfsi+0x80>
     2ae:	84 30       	cpi	r24, 0x04	; 4
     2b0:	21 f4       	brne	.+8      	; 0x2ba <__fixsfsi+0x38>
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	88 23       	and	r24, r24
     2b6:	51 f1       	breq	.+84     	; 0x30c <__fixsfsi+0x8a>
     2b8:	2e c0       	rjmp	.+92     	; 0x316 <__fixsfsi+0x94>
     2ba:	2f 81       	ldd	r18, Y+7	; 0x07
     2bc:	38 85       	ldd	r19, Y+8	; 0x08
     2be:	37 fd       	sbrc	r19, 7
     2c0:	20 c0       	rjmp	.+64     	; 0x302 <__fixsfsi+0x80>
     2c2:	6e 81       	ldd	r22, Y+6	; 0x06
     2c4:	2f 31       	cpi	r18, 0x1F	; 31
     2c6:	31 05       	cpc	r19, r1
     2c8:	1c f0       	brlt	.+6      	; 0x2d0 <__fixsfsi+0x4e>
     2ca:	66 23       	and	r22, r22
     2cc:	f9 f0       	breq	.+62     	; 0x30c <__fixsfsi+0x8a>
     2ce:	23 c0       	rjmp	.+70     	; 0x316 <__fixsfsi+0x94>
     2d0:	8e e1       	ldi	r24, 0x1E	; 30
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	82 1b       	sub	r24, r18
     2d6:	93 0b       	sbc	r25, r19
     2d8:	29 85       	ldd	r18, Y+9	; 0x09
     2da:	3a 85       	ldd	r19, Y+10	; 0x0a
     2dc:	4b 85       	ldd	r20, Y+11	; 0x0b
     2de:	5c 85       	ldd	r21, Y+12	; 0x0c
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <__fixsfsi+0x68>
     2e2:	56 95       	lsr	r21
     2e4:	47 95       	ror	r20
     2e6:	37 95       	ror	r19
     2e8:	27 95       	ror	r18
     2ea:	8a 95       	dec	r24
     2ec:	d2 f7       	brpl	.-12     	; 0x2e2 <__fixsfsi+0x60>
     2ee:	66 23       	and	r22, r22
     2f0:	b1 f0       	breq	.+44     	; 0x31e <__fixsfsi+0x9c>
     2f2:	50 95       	com	r21
     2f4:	40 95       	com	r20
     2f6:	30 95       	com	r19
     2f8:	21 95       	neg	r18
     2fa:	3f 4f       	sbci	r19, 0xFF	; 255
     2fc:	4f 4f       	sbci	r20, 0xFF	; 255
     2fe:	5f 4f       	sbci	r21, 0xFF	; 255
     300:	0e c0       	rjmp	.+28     	; 0x31e <__fixsfsi+0x9c>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	09 c0       	rjmp	.+18     	; 0x31e <__fixsfsi+0x9c>
     30c:	2f ef       	ldi	r18, 0xFF	; 255
     30e:	3f ef       	ldi	r19, 0xFF	; 255
     310:	4f ef       	ldi	r20, 0xFF	; 255
     312:	5f e7       	ldi	r21, 0x7F	; 127
     314:	04 c0       	rjmp	.+8      	; 0x31e <__fixsfsi+0x9c>
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e8       	ldi	r21, 0x80	; 128
     31e:	b9 01       	movw	r22, r18
     320:	ca 01       	movw	r24, r20
     322:	2c 96       	adiw	r28, 0x0c	; 12
     324:	e2 e0       	ldi	r30, 0x02	; 2
     326:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__epilogue_restores__+0x20>

0000032a <__floatunsisf>:
     32a:	a8 e0       	ldi	r26, 0x08	; 8
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	eb e9       	ldi	r30, 0x9B	; 155
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x10>
     336:	7b 01       	movw	r14, r22
     338:	8c 01       	movw	r16, r24
     33a:	61 15       	cp	r22, r1
     33c:	71 05       	cpc	r23, r1
     33e:	81 05       	cpc	r24, r1
     340:	91 05       	cpc	r25, r1
     342:	19 f4       	brne	.+6      	; 0x34a <__floatunsisf+0x20>
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	60 c0       	rjmp	.+192    	; 0x40a <__floatunsisf+0xe0>
     34a:	83 e0       	ldi	r24, 0x03	; 3
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	8e e1       	ldi	r24, 0x1E	; 30
     350:	c8 2e       	mov	r12, r24
     352:	d1 2c       	mov	r13, r1
     354:	dc 82       	std	Y+4, r13	; 0x04
     356:	cb 82       	std	Y+3, r12	; 0x03
     358:	ed 82       	std	Y+5, r14	; 0x05
     35a:	fe 82       	std	Y+6, r15	; 0x06
     35c:	0f 83       	std	Y+7, r16	; 0x07
     35e:	18 87       	std	Y+8, r17	; 0x08
     360:	c8 01       	movw	r24, r16
     362:	b7 01       	movw	r22, r14
     364:	0e 94 0e 02 	call	0x41c	; 0x41c <__clzsi2>
     368:	fc 01       	movw	r30, r24
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	f7 ff       	sbrs	r31, 7
     36e:	3b c0       	rjmp	.+118    	; 0x3e6 <__floatunsisf+0xbc>
     370:	22 27       	eor	r18, r18
     372:	33 27       	eor	r19, r19
     374:	2e 1b       	sub	r18, r30
     376:	3f 0b       	sbc	r19, r31
     378:	57 01       	movw	r10, r14
     37a:	68 01       	movw	r12, r16
     37c:	02 2e       	mov	r0, r18
     37e:	04 c0       	rjmp	.+8      	; 0x388 <__floatunsisf+0x5e>
     380:	d6 94       	lsr	r13
     382:	c7 94       	ror	r12
     384:	b7 94       	ror	r11
     386:	a7 94       	ror	r10
     388:	0a 94       	dec	r0
     38a:	d2 f7       	brpl	.-12     	; 0x380 <__floatunsisf+0x56>
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	a0 e0       	ldi	r26, 0x00	; 0
     39a:	b0 e0       	ldi	r27, 0x00	; 0
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <__floatunsisf+0x7c>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	aa 1f       	adc	r26, r26
     3a4:	bb 1f       	adc	r27, r27
     3a6:	2a 95       	dec	r18
     3a8:	d2 f7       	brpl	.-12     	; 0x39e <__floatunsisf+0x74>
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	a1 09       	sbc	r26, r1
     3ae:	b1 09       	sbc	r27, r1
     3b0:	8e 21       	and	r24, r14
     3b2:	9f 21       	and	r25, r15
     3b4:	a0 23       	and	r26, r16
     3b6:	b1 23       	and	r27, r17
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	a1 05       	cpc	r26, r1
     3bc:	b1 05       	cpc	r27, r1
     3be:	21 f0       	breq	.+8      	; 0x3c8 <__floatunsisf+0x9e>
     3c0:	41 e0       	ldi	r20, 0x01	; 1
     3c2:	50 e0       	ldi	r21, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	4a 29       	or	r20, r10
     3ca:	5b 29       	or	r21, r11
     3cc:	6c 29       	or	r22, r12
     3ce:	7d 29       	or	r23, r13
     3d0:	4d 83       	std	Y+5, r20	; 0x05
     3d2:	5e 83       	std	Y+6, r21	; 0x06
     3d4:	6f 83       	std	Y+7, r22	; 0x07
     3d6:	78 87       	std	Y+8, r23	; 0x08
     3d8:	8e e1       	ldi	r24, 0x1E	; 30
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	8e 1b       	sub	r24, r30
     3de:	9f 0b       	sbc	r25, r31
     3e0:	9c 83       	std	Y+4, r25	; 0x04
     3e2:	8b 83       	std	Y+3, r24	; 0x03
     3e4:	12 c0       	rjmp	.+36     	; 0x40a <__floatunsisf+0xe0>
     3e6:	30 97       	sbiw	r30, 0x00	; 0
     3e8:	81 f0       	breq	.+32     	; 0x40a <__floatunsisf+0xe0>
     3ea:	0e 2e       	mov	r0, r30
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <__floatunsisf+0xcc>
     3ee:	ee 0c       	add	r14, r14
     3f0:	ff 1c       	adc	r15, r15
     3f2:	00 1f       	adc	r16, r16
     3f4:	11 1f       	adc	r17, r17
     3f6:	0a 94       	dec	r0
     3f8:	d2 f7       	brpl	.-12     	; 0x3ee <__floatunsisf+0xc4>
     3fa:	ed 82       	std	Y+5, r14	; 0x05
     3fc:	fe 82       	std	Y+6, r15	; 0x06
     3fe:	0f 83       	std	Y+7, r16	; 0x07
     400:	18 87       	std	Y+8, r17	; 0x08
     402:	ce 1a       	sub	r12, r30
     404:	df 0a       	sbc	r13, r31
     406:	dc 82       	std	Y+4, r13	; 0x04
     408:	cb 82       	std	Y+3, r12	; 0x03
     40a:	1a 82       	std	Y+2, r1	; 0x02
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__pack_f>
     414:	28 96       	adiw	r28, 0x08	; 8
     416:	ea e0       	ldi	r30, 0x0A	; 10
     418:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x10>

0000041c <__clzsi2>:
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	7b 01       	movw	r14, r22
     426:	8c 01       	movw	r16, r24
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	e8 16       	cp	r14, r24
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	f8 06       	cpc	r15, r24
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	08 07       	cpc	r16, r24
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	18 07       	cpc	r17, r24
     438:	88 f4       	brcc	.+34     	; 0x45c <__clzsi2+0x40>
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	e8 16       	cp	r14, r24
     43e:	f1 04       	cpc	r15, r1
     440:	01 05       	cpc	r16, r1
     442:	11 05       	cpc	r17, r1
     444:	31 f0       	breq	.+12     	; 0x452 <__clzsi2+0x36>
     446:	28 f0       	brcs	.+10     	; 0x452 <__clzsi2+0x36>
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	a0 e0       	ldi	r26, 0x00	; 0
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	17 c0       	rjmp	.+46     	; 0x480 <__clzsi2+0x64>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	12 c0       	rjmp	.+36     	; 0x480 <__clzsi2+0x64>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	e8 16       	cp	r14, r24
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	f8 06       	cpc	r15, r24
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	08 07       	cpc	r16, r24
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	18 07       	cpc	r17, r24
     46c:	28 f0       	brcs	.+10     	; 0x478 <__clzsi2+0x5c>
     46e:	88 e1       	ldi	r24, 0x18	; 24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	04 c0       	rjmp	.+8      	; 0x480 <__clzsi2+0x64>
     478:	80 e1       	ldi	r24, 0x10	; 16
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	a0 e0       	ldi	r26, 0x00	; 0
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	20 e2       	ldi	r18, 0x20	; 32
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	28 1b       	sub	r18, r24
     48a:	39 0b       	sbc	r19, r25
     48c:	4a 0b       	sbc	r20, r26
     48e:	5b 0b       	sbc	r21, r27
     490:	04 c0       	rjmp	.+8      	; 0x49a <__clzsi2+0x7e>
     492:	16 95       	lsr	r17
     494:	07 95       	ror	r16
     496:	f7 94       	ror	r15
     498:	e7 94       	ror	r14
     49a:	8a 95       	dec	r24
     49c:	d2 f7       	brpl	.-12     	; 0x492 <__clzsi2+0x76>
     49e:	f7 01       	movw	r30, r14
     4a0:	e8 5f       	subi	r30, 0xF8	; 248
     4a2:	fd 4f       	sbci	r31, 0xFD	; 253
     4a4:	80 81       	ld	r24, Z
     4a6:	28 1b       	sub	r18, r24
     4a8:	31 09       	sbc	r19, r1
     4aa:	41 09       	sbc	r20, r1
     4ac:	51 09       	sbc	r21, r1
     4ae:	c9 01       	movw	r24, r18
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	08 95       	ret

000004ba <__pack_f>:
     4ba:	df 92       	push	r13
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	fc 01       	movw	r30, r24
     4c6:	e4 80       	ldd	r14, Z+4	; 0x04
     4c8:	f5 80       	ldd	r15, Z+5	; 0x05
     4ca:	06 81       	ldd	r16, Z+6	; 0x06
     4cc:	17 81       	ldd	r17, Z+7	; 0x07
     4ce:	d1 80       	ldd	r13, Z+1	; 0x01
     4d0:	80 81       	ld	r24, Z
     4d2:	82 30       	cpi	r24, 0x02	; 2
     4d4:	48 f4       	brcc	.+18     	; 0x4e8 <__pack_f+0x2e>
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	a0 e1       	ldi	r26, 0x10	; 16
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e8 2a       	or	r14, r24
     4e0:	f9 2a       	or	r15, r25
     4e2:	0a 2b       	or	r16, r26
     4e4:	1b 2b       	or	r17, r27
     4e6:	a5 c0       	rjmp	.+330    	; 0x632 <__pack_f+0x178>
     4e8:	84 30       	cpi	r24, 0x04	; 4
     4ea:	09 f4       	brne	.+2      	; 0x4ee <__pack_f+0x34>
     4ec:	9f c0       	rjmp	.+318    	; 0x62c <__pack_f+0x172>
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	21 f4       	brne	.+8      	; 0x4fa <__pack_f+0x40>
     4f2:	ee 24       	eor	r14, r14
     4f4:	ff 24       	eor	r15, r15
     4f6:	87 01       	movw	r16, r14
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <__pack_f+0x4a>
     4fa:	e1 14       	cp	r14, r1
     4fc:	f1 04       	cpc	r15, r1
     4fe:	01 05       	cpc	r16, r1
     500:	11 05       	cpc	r17, r1
     502:	19 f4       	brne	.+6      	; 0x50a <__pack_f+0x50>
     504:	e0 e0       	ldi	r30, 0x00	; 0
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	96 c0       	rjmp	.+300    	; 0x636 <__pack_f+0x17c>
     50a:	62 81       	ldd	r22, Z+2	; 0x02
     50c:	73 81       	ldd	r23, Z+3	; 0x03
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	62 38       	cpi	r22, 0x82	; 130
     512:	79 07       	cpc	r23, r25
     514:	0c f0       	brlt	.+2      	; 0x518 <__pack_f+0x5e>
     516:	5b c0       	rjmp	.+182    	; 0x5ce <__pack_f+0x114>
     518:	22 e8       	ldi	r18, 0x82	; 130
     51a:	3f ef       	ldi	r19, 0xFF	; 255
     51c:	26 1b       	sub	r18, r22
     51e:	37 0b       	sbc	r19, r23
     520:	2a 31       	cpi	r18, 0x1A	; 26
     522:	31 05       	cpc	r19, r1
     524:	2c f0       	brlt	.+10     	; 0x530 <__pack_f+0x76>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	2a c0       	rjmp	.+84     	; 0x584 <__pack_f+0xca>
     530:	b8 01       	movw	r22, r16
     532:	a7 01       	movw	r20, r14
     534:	02 2e       	mov	r0, r18
     536:	04 c0       	rjmp	.+8      	; 0x540 <__pack_f+0x86>
     538:	76 95       	lsr	r23
     53a:	67 95       	ror	r22
     53c:	57 95       	ror	r21
     53e:	47 95       	ror	r20
     540:	0a 94       	dec	r0
     542:	d2 f7       	brpl	.-12     	; 0x538 <__pack_f+0x7e>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	04 c0       	rjmp	.+8      	; 0x556 <__pack_f+0x9c>
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	aa 1f       	adc	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	2a 95       	dec	r18
     558:	d2 f7       	brpl	.-12     	; 0x54e <__pack_f+0x94>
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	a1 09       	sbc	r26, r1
     55e:	b1 09       	sbc	r27, r1
     560:	8e 21       	and	r24, r14
     562:	9f 21       	and	r25, r15
     564:	a0 23       	and	r26, r16
     566:	b1 23       	and	r27, r17
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	a1 05       	cpc	r26, r1
     56c:	b1 05       	cpc	r27, r1
     56e:	21 f0       	breq	.+8      	; 0x578 <__pack_f+0xbe>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	9a 01       	movw	r18, r20
     57a:	ab 01       	movw	r20, r22
     57c:	28 2b       	or	r18, r24
     57e:	39 2b       	or	r19, r25
     580:	4a 2b       	or	r20, r26
     582:	5b 2b       	or	r21, r27
     584:	da 01       	movw	r26, r20
     586:	c9 01       	movw	r24, r18
     588:	8f 77       	andi	r24, 0x7F	; 127
     58a:	90 70       	andi	r25, 0x00	; 0
     58c:	a0 70       	andi	r26, 0x00	; 0
     58e:	b0 70       	andi	r27, 0x00	; 0
     590:	80 34       	cpi	r24, 0x40	; 64
     592:	91 05       	cpc	r25, r1
     594:	a1 05       	cpc	r26, r1
     596:	b1 05       	cpc	r27, r1
     598:	39 f4       	brne	.+14     	; 0x5a8 <__pack_f+0xee>
     59a:	27 ff       	sbrs	r18, 7
     59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__pack_f+0xf6>
     59e:	20 5c       	subi	r18, 0xC0	; 192
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	4f 4f       	sbci	r20, 0xFF	; 255
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__pack_f+0xf6>
     5a8:	21 5c       	subi	r18, 0xC1	; 193
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	4f 4f       	sbci	r20, 0xFF	; 255
     5ae:	5f 4f       	sbci	r21, 0xFF	; 255
     5b0:	e0 e0       	ldi	r30, 0x00	; 0
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	20 30       	cpi	r18, 0x00	; 0
     5b6:	a0 e0       	ldi	r26, 0x00	; 0
     5b8:	3a 07       	cpc	r19, r26
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	4a 07       	cpc	r20, r26
     5be:	a0 e4       	ldi	r26, 0x40	; 64
     5c0:	5a 07       	cpc	r21, r26
     5c2:	10 f0       	brcs	.+4      	; 0x5c8 <__pack_f+0x10e>
     5c4:	e1 e0       	ldi	r30, 0x01	; 1
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	79 01       	movw	r14, r18
     5ca:	8a 01       	movw	r16, r20
     5cc:	27 c0       	rjmp	.+78     	; 0x61c <__pack_f+0x162>
     5ce:	60 38       	cpi	r22, 0x80	; 128
     5d0:	71 05       	cpc	r23, r1
     5d2:	64 f5       	brge	.+88     	; 0x62c <__pack_f+0x172>
     5d4:	fb 01       	movw	r30, r22
     5d6:	e1 58       	subi	r30, 0x81	; 129
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	d8 01       	movw	r26, r16
     5dc:	c7 01       	movw	r24, r14
     5de:	8f 77       	andi	r24, 0x7F	; 127
     5e0:	90 70       	andi	r25, 0x00	; 0
     5e2:	a0 70       	andi	r26, 0x00	; 0
     5e4:	b0 70       	andi	r27, 0x00	; 0
     5e6:	80 34       	cpi	r24, 0x40	; 64
     5e8:	91 05       	cpc	r25, r1
     5ea:	a1 05       	cpc	r26, r1
     5ec:	b1 05       	cpc	r27, r1
     5ee:	39 f4       	brne	.+14     	; 0x5fe <__pack_f+0x144>
     5f0:	e7 fe       	sbrs	r14, 7
     5f2:	0d c0       	rjmp	.+26     	; 0x60e <__pack_f+0x154>
     5f4:	80 e4       	ldi	r24, 0x40	; 64
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a0 e0       	ldi	r26, 0x00	; 0
     5fa:	b0 e0       	ldi	r27, 0x00	; 0
     5fc:	04 c0       	rjmp	.+8      	; 0x606 <__pack_f+0x14c>
     5fe:	8f e3       	ldi	r24, 0x3F	; 63
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	e8 0e       	add	r14, r24
     608:	f9 1e       	adc	r15, r25
     60a:	0a 1f       	adc	r16, r26
     60c:	1b 1f       	adc	r17, r27
     60e:	17 ff       	sbrs	r17, 7
     610:	05 c0       	rjmp	.+10     	; 0x61c <__pack_f+0x162>
     612:	16 95       	lsr	r17
     614:	07 95       	ror	r16
     616:	f7 94       	ror	r15
     618:	e7 94       	ror	r14
     61a:	31 96       	adiw	r30, 0x01	; 1
     61c:	87 e0       	ldi	r24, 0x07	; 7
     61e:	16 95       	lsr	r17
     620:	07 95       	ror	r16
     622:	f7 94       	ror	r15
     624:	e7 94       	ror	r14
     626:	8a 95       	dec	r24
     628:	d1 f7       	brne	.-12     	; 0x61e <__pack_f+0x164>
     62a:	05 c0       	rjmp	.+10     	; 0x636 <__pack_f+0x17c>
     62c:	ee 24       	eor	r14, r14
     62e:	ff 24       	eor	r15, r15
     630:	87 01       	movw	r16, r14
     632:	ef ef       	ldi	r30, 0xFF	; 255
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	6e 2f       	mov	r22, r30
     638:	67 95       	ror	r22
     63a:	66 27       	eor	r22, r22
     63c:	67 95       	ror	r22
     63e:	90 2f       	mov	r25, r16
     640:	9f 77       	andi	r25, 0x7F	; 127
     642:	d7 94       	ror	r13
     644:	dd 24       	eor	r13, r13
     646:	d7 94       	ror	r13
     648:	8e 2f       	mov	r24, r30
     64a:	86 95       	lsr	r24
     64c:	49 2f       	mov	r20, r25
     64e:	46 2b       	or	r20, r22
     650:	58 2f       	mov	r21, r24
     652:	5d 29       	or	r21, r13
     654:	b7 01       	movw	r22, r14
     656:	ca 01       	movw	r24, r20
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	08 95       	ret

00000664 <__unpack_f>:
     664:	fc 01       	movw	r30, r24
     666:	db 01       	movw	r26, r22
     668:	40 81       	ld	r20, Z
     66a:	51 81       	ldd	r21, Z+1	; 0x01
     66c:	22 81       	ldd	r18, Z+2	; 0x02
     66e:	62 2f       	mov	r22, r18
     670:	6f 77       	andi	r22, 0x7F	; 127
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	22 1f       	adc	r18, r18
     676:	22 27       	eor	r18, r18
     678:	22 1f       	adc	r18, r18
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	89 2f       	mov	r24, r25
     67e:	88 0f       	add	r24, r24
     680:	82 2b       	or	r24, r18
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	99 1f       	adc	r25, r25
     688:	99 27       	eor	r25, r25
     68a:	99 1f       	adc	r25, r25
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	9c 93       	st	X, r25
     690:	11 97       	sbiw	r26, 0x01	; 1
     692:	21 15       	cp	r18, r1
     694:	31 05       	cpc	r19, r1
     696:	a9 f5       	brne	.+106    	; 0x702 <__unpack_f+0x9e>
     698:	41 15       	cp	r20, r1
     69a:	51 05       	cpc	r21, r1
     69c:	61 05       	cpc	r22, r1
     69e:	71 05       	cpc	r23, r1
     6a0:	11 f4       	brne	.+4      	; 0x6a6 <__unpack_f+0x42>
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	37 c0       	rjmp	.+110    	; 0x714 <__unpack_f+0xb0>
     6a6:	82 e8       	ldi	r24, 0x82	; 130
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	13 96       	adiw	r26, 0x03	; 3
     6ac:	9c 93       	st	X, r25
     6ae:	8e 93       	st	-X, r24
     6b0:	12 97       	sbiw	r26, 0x02	; 2
     6b2:	9a 01       	movw	r18, r20
     6b4:	ab 01       	movw	r20, r22
     6b6:	67 e0       	ldi	r22, 0x07	; 7
     6b8:	22 0f       	add	r18, r18
     6ba:	33 1f       	adc	r19, r19
     6bc:	44 1f       	adc	r20, r20
     6be:	55 1f       	adc	r21, r21
     6c0:	6a 95       	dec	r22
     6c2:	d1 f7       	brne	.-12     	; 0x6b8 <__unpack_f+0x54>
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	8c 93       	st	X, r24
     6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <__unpack_f+0x80>
     6ca:	22 0f       	add	r18, r18
     6cc:	33 1f       	adc	r19, r19
     6ce:	44 1f       	adc	r20, r20
     6d0:	55 1f       	adc	r21, r21
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	8d 91       	ld	r24, X+
     6d6:	9c 91       	ld	r25, X
     6d8:	13 97       	sbiw	r26, 0x03	; 3
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	13 96       	adiw	r26, 0x03	; 3
     6de:	9c 93       	st	X, r25
     6e0:	8e 93       	st	-X, r24
     6e2:	12 97       	sbiw	r26, 0x02	; 2
     6e4:	20 30       	cpi	r18, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	38 07       	cpc	r19, r24
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	48 07       	cpc	r20, r24
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	58 07       	cpc	r21, r24
     6f2:	58 f3       	brcs	.-42     	; 0x6ca <__unpack_f+0x66>
     6f4:	14 96       	adiw	r26, 0x04	; 4
     6f6:	2d 93       	st	X+, r18
     6f8:	3d 93       	st	X+, r19
     6fa:	4d 93       	st	X+, r20
     6fc:	5c 93       	st	X, r21
     6fe:	17 97       	sbiw	r26, 0x07	; 7
     700:	08 95       	ret
     702:	2f 3f       	cpi	r18, 0xFF	; 255
     704:	31 05       	cpc	r19, r1
     706:	79 f4       	brne	.+30     	; 0x726 <__unpack_f+0xc2>
     708:	41 15       	cp	r20, r1
     70a:	51 05       	cpc	r21, r1
     70c:	61 05       	cpc	r22, r1
     70e:	71 05       	cpc	r23, r1
     710:	19 f4       	brne	.+6      	; 0x718 <__unpack_f+0xb4>
     712:	84 e0       	ldi	r24, 0x04	; 4
     714:	8c 93       	st	X, r24
     716:	08 95       	ret
     718:	64 ff       	sbrs	r22, 4
     71a:	03 c0       	rjmp	.+6      	; 0x722 <__unpack_f+0xbe>
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	8c 93       	st	X, r24
     720:	12 c0       	rjmp	.+36     	; 0x746 <__unpack_f+0xe2>
     722:	1c 92       	st	X, r1
     724:	10 c0       	rjmp	.+32     	; 0x746 <__unpack_f+0xe2>
     726:	2f 57       	subi	r18, 0x7F	; 127
     728:	30 40       	sbci	r19, 0x00	; 0
     72a:	13 96       	adiw	r26, 0x03	; 3
     72c:	3c 93       	st	X, r19
     72e:	2e 93       	st	-X, r18
     730:	12 97       	sbiw	r26, 0x02	; 2
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	8c 93       	st	X, r24
     736:	87 e0       	ldi	r24, 0x07	; 7
     738:	44 0f       	add	r20, r20
     73a:	55 1f       	adc	r21, r21
     73c:	66 1f       	adc	r22, r22
     73e:	77 1f       	adc	r23, r23
     740:	8a 95       	dec	r24
     742:	d1 f7       	brne	.-12     	; 0x738 <__unpack_f+0xd4>
     744:	70 64       	ori	r23, 0x40	; 64
     746:	14 96       	adiw	r26, 0x04	; 4
     748:	4d 93       	st	X+, r20
     74a:	5d 93       	st	X+, r21
     74c:	6d 93       	st	X+, r22
     74e:	7c 93       	st	X, r23
     750:	17 97       	sbiw	r26, 0x07	; 7
     752:	08 95       	ret

00000754 <__vector_25>:
#include "uart.h"

/* Global variables to hold the address of the call back function in the application */
static volatile void (*int_callBackPtr)(void) = NULL_PTR;

ISR(USART0_RX_vect){
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	00 90 5b 00 	lds	r0, 0x005B
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
	if(int_callBackPtr != NULL_PTR)
     784:	80 91 20 03 	lds	r24, 0x0320
     788:	90 91 21 03 	lds	r25, 0x0321
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	29 f0       	breq	.+10     	; 0x79a <__vector_25+0x46>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*int_callBackPtr)();
     790:	e0 91 20 03 	lds	r30, 0x0320
     794:	f0 91 21 03 	lds	r31, 0x0321
     798:	19 95       	eicall
	}
}
     79a:	cf 91       	pop	r28
     79c:	df 91       	pop	r29
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	00 92 5b 00 	sts	0x005B, r0
     7bc:	0f 90       	pop	r0
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	0f 90       	pop	r0
     7c2:	1f 90       	pop	r1
     7c4:	18 95       	reti

000007c6 <uart_start>:

void uart_start(void) {
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
     7ce:	a1 ec       	ldi	r26, 0xC1	; 193
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	e1 ec       	ldi	r30, 0xC1	; 193
     7d4:	f0 e0       	ldi	r31, 0x00	; 0
     7d6:	80 81       	ld	r24, Z
     7d8:	88 61       	ori	r24, 0x18	; 24
     7da:	8c 93       	st	X, r24
  UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
     7dc:	a2 ec       	ldi	r26, 0xC2	; 194
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	e2 ec       	ldi	r30, 0xC2	; 194
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	86 60       	ori	r24, 0x06	; 6
     7e8:	8c 93       	st	X, r24

  UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
     7ea:	e4 ec       	ldi	r30, 0xC4	; 196
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	83 e3       	ldi	r24, 0x33	; 51
     7f0:	80 83       	st	Z, r24
  UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
     7f2:	e5 ec       	ldi	r30, 0xC5	; 197
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	10 82       	st	Z, r1
 // UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data

  #if DEBUG
    uart_sendstr("0x04 - UART is up...");
  #endif
}
     7f8:	cf 91       	pop	r28
     7fa:	df 91       	pop	r29
     7fc:	08 95       	ret

000007fe <uart_sendint>:

void uart_sendint(uint8_t data) {
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	0f 92       	push	r0
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	89 83       	std	Y+1, r24	; 0x01
    /*
    Use this to send a 8bit long piece of data
    */
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     80a:	e0 ec       	ldi	r30, 0xC0	; 192
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	88 2f       	mov	r24, r24
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	80 72       	andi	r24, 0x20	; 32
     816:	90 70       	andi	r25, 0x00	; 0
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	b9 f3       	breq	.-18     	; 0x80a <uart_sendint+0xc>
    UDR0 = data; //send the data
     81c:	e6 ec       	ldi	r30, 0xC6	; 198
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	80 83       	st	Z, r24
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     824:	e0 ec       	ldi	r30, 0xC0	; 192
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	88 2f       	mov	r24, r24
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	80 72       	andi	r24, 0x20	; 32
     830:	90 70       	andi	r25, 0x00	; 0
     832:	00 97       	sbiw	r24, 0x00	; 0
     834:	b9 f3       	breq	.-18     	; 0x824 <uart_sendint+0x26>
    UDR0 = '\n';//send a new line just to be sure
     836:	e6 ec       	ldi	r30, 0xC6	; 198
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	8a e0       	ldi	r24, 0x0A	; 10
     83c:	80 83       	st	Z, r24
}
     83e:	0f 90       	pop	r0
     840:	cf 91       	pop	r28
     842:	df 91       	pop	r29
     844:	08 95       	ret

00000846 <uart_sendint16>:

void uart_sendint16(uint16_t data) {
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	0f 92       	push	r0
     84c:	0f 92       	push	r0
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	9a 83       	std	Y+2, r25	; 0x02
     854:	89 83       	std	Y+1, r24	; 0x01
    /*
    Use this to send a 16bit long piece of data
    */
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     856:	e0 ec       	ldi	r30, 0xC0	; 192
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	88 2f       	mov	r24, r24
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	80 72       	andi	r24, 0x20	; 32
     862:	90 70       	andi	r25, 0x00	; 0
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	b9 f3       	breq	.-18     	; 0x856 <uart_sendint16+0x10>
    UDR0 = data;//send the lower bits
     868:	e6 ec       	ldi	r30, 0xC6	; 198
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	80 83       	st	Z, r24
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     870:	e0 ec       	ldi	r30, 0xC0	; 192
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	80 72       	andi	r24, 0x20	; 32
     87c:	90 70       	andi	r25, 0x00	; 0
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	b9 f3       	breq	.-18     	; 0x870 <uart_sendint16+0x2a>
    UDR0 = (data >> 8); //send the higher bits
     882:	e6 ec       	ldi	r30, 0xC6	; 198
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	9a 81       	ldd	r25, Y+2	; 0x02
     88a:	89 2f       	mov	r24, r25
     88c:	99 27       	eor	r25, r25
     88e:	80 83       	st	Z, r24
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     890:	e0 ec       	ldi	r30, 0xC0	; 192
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	80 81       	ld	r24, Z
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	80 72       	andi	r24, 0x20	; 32
     89c:	90 70       	andi	r25, 0x00	; 0
     89e:	00 97       	sbiw	r24, 0x00	; 0
     8a0:	b9 f3       	breq	.-18     	; 0x890 <uart_sendint16+0x4a>
    UDR0 = '\n';//send a new line just to be sure
     8a2:	e6 ec       	ldi	r30, 0xC6	; 198
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	80 83       	st	Z, r24
}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	cf 91       	pop	r28
     8b0:	df 91       	pop	r29
     8b2:	08 95       	ret

000008b4 <uart_sendstr>:

void uart_sendstr(char *data) {
     8b4:	df 93       	push	r29
     8b6:	cf 93       	push	r28
     8b8:	0f 92       	push	r0
     8ba:	0f 92       	push	r0
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	9a 83       	std	Y+2, r25	; 0x02
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	14 c0       	rjmp	.+40     	; 0x8ee <uart_sendstr+0x3a>
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     8c6:	e0 ec       	ldi	r30, 0xC0	; 192
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	88 2f       	mov	r24, r24
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	80 72       	andi	r24, 0x20	; 32
     8d2:	90 70       	andi	r25, 0x00	; 0
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	b9 f3       	breq	.-18     	; 0x8c6 <uart_sendstr+0x12>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
     8d8:	a6 ec       	ldi	r26, 0xC6	; 198
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e9 81       	ldd	r30, Y+1	; 0x01
     8de:	fa 81       	ldd	r31, Y+2	; 0x02
     8e0:	80 81       	ld	r24, Z
     8e2:	8c 93       	st	X, r24
        data += 1;//go to new bit in string
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
     8e6:	9a 81       	ldd	r25, Y+2	; 0x02
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
void uart_sendstr(char *data) {
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
     8ee:	e9 81       	ldd	r30, Y+1	; 0x01
     8f0:	fa 81       	ldd	r31, Y+2	; 0x02
     8f2:	80 81       	ld	r24, Z
     8f4:	88 23       	and	r24, r24
     8f6:	39 f7       	brne	.-50     	; 0x8c6 <uart_sendstr+0x12>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
     8f8:	e0 ec       	ldi	r30, 0xC0	; 192
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	80 72       	andi	r24, 0x20	; 32
     904:	90 70       	andi	r25, 0x00	; 0
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	b9 f3       	breq	.-18     	; 0x8f8 <uart_sendstr+0x44>
    UDR0 = '\n';//send a new line just to be sure
     90a:	e6 ec       	ldi	r30, 0xC6	; 198
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	8a e0       	ldi	r24, 0x0A	; 10
     910:	80 83       	st	Z, r24
}
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	08 95       	ret

0000091c <USART_Receive>:
//	*******************************************************************/
//}
//
//
unsigned char USART_Receive( void )
{
     91c:	df 93       	push	r29
     91e:	cf 93       	push	r28
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSR0A,RXC0)){}
     924:	e0 ec       	ldi	r30, 0xC0	; 192
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	88 23       	and	r24, r24
     92c:	dc f7       	brge	.-10     	; 0x924 <USART_Receive+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR0;
     92e:	e6 ec       	ldi	r30, 0xC6	; 198
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
}
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	08 95       	ret

0000093a <int_setCallBack>:

void int_setCallBack(void(*a_ptr)(void))
{
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	0f 92       	push	r0
     940:	0f 92       	push	r0
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	9a 83       	std	Y+2, r25	; 0x02
     948:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	int_callBackPtr = a_ptr;
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	9a 81       	ldd	r25, Y+2	; 0x02
     94e:	90 93 21 03 	sts	0x0321, r25
     952:	80 93 20 03 	sts	0x0320, r24
}
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	cf 91       	pop	r28
     95c:	df 91       	pop	r29
     95e:	08 95       	ret

00000960 <TIMER2_voidStartTimer>:
 * Description : Start Timer2 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER2_voidStartTimer(void)
 {
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	 /*Start TCNT2 Reg counting by loading it's value*/
	 TCCR2A = TIMER2_uint8_tTCCR2A_Value;
     968:	e0 eb       	ldi	r30, 0xB0	; 176
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 91 22 03 	lds	r24, 0x0322
     970:	80 83       	st	Z, r24
	 TCCR2B = TIMER2_uint8_tTCCR2B_Value;
     972:	e1 eb       	ldi	r30, 0xB1	; 177
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 91 23 03 	lds	r24, 0x0323
     97a:	80 83       	st	Z, r24

 }
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	08 95       	ret

00000982 <TIMER2_voidStopTimer>:
 * Description : Stop Timer2 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER2_voidStopTimer(void)
 {
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62

	 /*Stop TCNT2 Reg counting by loading zeros in CS20,CS21,CS22*/
 	 TCCR2B = TIMER2_uint8_tTCCR2B_Value & TIMER2_STOP_MASK;
     98a:	e1 eb       	ldi	r30, 0xB1	; 177
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 91 23 03 	lds	r24, 0x0323
     992:	88 7f       	andi	r24, 0xF8	; 248
     994:	80 83       	st	Z, r24


 }
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	08 95       	ret

0000099c <TIMER2_voidInitializeTimer2>:
 * Description : Initialize Timer2 with pre configured values in cofig file
 * Arguments   : void
 * return      : void
 ***********************************************************************************/
 void TIMER2_voidInitializeTimer2(void)
 {
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
	 TCNT2=0;
     9a6:	e2 eb       	ldi	r30, 0xB2	; 178
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	10 82       	st	Z, r1

	/*TCCR2B Prescaler value is stored temporarily in TIMER2_uint8_tTCCR2B_Value variable*/
	/*Initialize TCCR2B_ value*/
	/*Reset first 3 BITS*/
	TIMER2_uint8_tTCCR2B_Value &= TIMER2_TCCR2B_MASK;
     9ac:	80 91 23 03 	lds	r24, 0x0323
     9b0:	88 7f       	andi	r24, 0xF8	; 248
     9b2:	80 93 23 03 	sts	0x0323, r24


	/*Mask Prescaler value*/
	TIMER2_uint8_tTCCR2B_Value |= TIMER2_PRESCALER;
     9b6:	80 91 23 03 	lds	r24, 0x0323
     9ba:	85 60       	ori	r24, 0x05	; 5
     9bc:	80 93 23 03 	sts	0x0323, r24


	/*====================================================================
	 * calculate Prescaler value that will be used later in equations
	 *====================================================================*/
	TIMER2_u16Prescaler = 1;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	90 93 09 03 	sts	0x0309, r25
     9c8:	80 93 08 03 	sts	0x0308, r24
		TIMER2_u16Prescaler = 8;

	#elif (TIMER2_PRESCALER>Prescaller_8 && TIMER2_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER2_PRESCALER*2);i++)
     9cc:	19 82       	std	Y+1, r1	; 0x01
     9ce:	0d c0       	rjmp	.+26     	; 0x9ea <TIMER2_voidInitializeTimer2+0x4e>
		{
			TIMER2_u16Prescaler *= 2;
     9d0:	80 91 08 03 	lds	r24, 0x0308
     9d4:	90 91 09 03 	lds	r25, 0x0309
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	90 93 09 03 	sts	0x0309, r25
     9e0:	80 93 08 03 	sts	0x0308, r24
		TIMER2_u16Prescaler = 8;

	#elif (TIMER2_PRESCALER>Prescaller_8 && TIMER2_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER2_PRESCALER*2);i++)
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	8f 5f       	subi	r24, 0xFF	; 255
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	8a 30       	cpi	r24, 0x0A	; 10
     9ee:	80 f3       	brcs	.-32     	; 0x9d0 <TIMER2_voidInitializeTimer2+0x34>
	#elif (TIMER2_MODE==TIMER2_FAST_PWM_MODE)



		/*Choose Fast PWM mode*/
		SET_BIT(TIMER2_uint8_tTCCR2A_Value,TIMER2_WGM20);
     9f0:	80 91 22 03 	lds	r24, 0x0322
     9f4:	81 60       	ori	r24, 0x01	; 1
     9f6:	80 93 22 03 	sts	0x0322, r24
		SET_BIT(TIMER2_uint8_tTCCR2A_Value,TIMER2_WGM21);
     9fa:	80 91 22 03 	lds	r24, 0x0322
     9fe:	82 60       	ori	r24, 0x02	; 2
     a00:	80 93 22 03 	sts	0x0322, r24
		SET_BIT(TIMER2_uint8_tTCCR2B_Value,TIMER2_WGM22);
     a04:	80 91 23 03 	lds	r24, 0x0323
     a08:	88 60       	ori	r24, 0x08	; 8
     a0a:	80 93 23 03 	sts	0x0323, r24
		//SET_BIT(DDRB_OC2A,4);
		OCR2A = TIMER2_OCR2A_VALUE;
     a0e:	e3 eb       	ldi	r30, 0xB3	; 179
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	8b e9       	ldi	r24, 0x9B	; 155
     a14:	80 83       	st	Z, r24
#if Timer2_ChannalB
		SET_BIT(DDRH_OC2B,6);
     a16:	a1 e0       	ldi	r26, 0x01	; 1
     a18:	b1 e0       	ldi	r27, 0x01	; 1
     a1a:	e1 e0       	ldi	r30, 0x01	; 1
     a1c:	f1 e0       	ldi	r31, 0x01	; 1
     a1e:	80 81       	ld	r24, Z
     a20:	80 64       	ori	r24, 0x40	; 64
     a22:	8c 93       	st	X, r24
	#endif


	/*Choose OC2A, OC2B Pin Mode*/
	/*mask COM2A0,COM2A1,COM2B0,COM2B1 bits with zeros*/
	TIMER2_uint8_tTCCR2A_Value &= TIMER2_COM_MASK;
     a24:	80 91 22 03 	lds	r24, 0x0322
     a28:	8f 70       	andi	r24, 0x0F	; 15
     a2a:	80 93 22 03 	sts	0x0322, r24
	/*Put mode in COM2A0,COM2A1 bits*/
	TIMER2_uint8_tTCCR2A_Value |= (Timer2_OC2A_MODE<<6) ;
     a2e:	80 91 22 03 	lds	r24, 0x0322
     a32:	80 68       	ori	r24, 0x80	; 128
     a34:	80 93 22 03 	sts	0x0322, r24
	/*Put mode in COM2B0,COM2B1 bits*/
	TIMER2_uint8_tTCCR2A_Value |= (Timer2_OC2B_MODE<<4) ;
     a38:	80 91 22 03 	lds	r24, 0x0322
     a3c:	80 62       	ori	r24, 0x20	; 32
     a3e:	80 93 22 03 	sts	0x0322, r24



 }/*TIMER2_voidInitializeTimer2*/
     a42:	0f 90       	pop	r0
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	08 95       	ret

00000a4a <TIMER2_voidFastPWM>:
 * Description : output Fast PWM on OC0 pin with duty cycle of Copy_uint8_tDutyCycle
 * Arguments   : DutyCycle: determine PWM duty cycle from 0 to 100
 * return      : void
 */
 void TIMER2_voidFastPWM(uint8_t Copy_uint8_tDutyCycle)
{
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	0f 92       	push	r0
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	89 83       	std	Y+1, r24	; 0x01
//		// OCR2A = (Copy_uint8_tDutyCycle*TIMER2_REG_CAPACITY)/100;
//	 }
	 //else if(channel == Channel_B2){
		 /*configure PWM Duty Cycle*/
		 //OCR2B = (Copy_uint8_tDutyCycle*TIMER2_REG_CAPACITY)/100;
		 OCR2B = Copy_uint8_tDutyCycle;
     a56:	e4 eb       	ldi	r30, 0xB4	; 180
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	80 83       	st	Z, r24
	 //}else return;
	 /*Start PWM*/
	 TIMER2_voidStartTimer();
     a5e:	0e 94 b0 04 	call	0x960	; 0x960 <TIMER2_voidStartTimer>

}/*end of TIMER2_voidFastPWM()*/
     a62:	0f 90       	pop	r0
     a64:	cf 91       	pop	r28
     a66:	df 91       	pop	r29
     a68:	08 95       	ret

00000a6a <TIMER0_voidStartTimer>:
 * Description : Start TIMER0 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER0_voidStartTimer(void)
 {
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	 /*Start TCNT2 Reg counting by loading it's value*/
	 TCCR0A = TIMER0_uint8_tTCCR0A_Value;
     a72:	e4 e4       	ldi	r30, 0x44	; 68
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 91 24 03 	lds	r24, 0x0324
     a7a:	80 83       	st	Z, r24
	 TCCR0B = TIMER0_uint8_tTCCR0B_Value;
     a7c:	e5 e4       	ldi	r30, 0x45	; 69
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 91 25 03 	lds	r24, 0x0325
     a84:	80 83       	st	Z, r24

 }
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <TIMER0_voidStopTimer>:
 * Description : Stop TIMER0 counter register
 * Arguments   : void
 * return      : void
 **************************************************************************************/
 void TIMER0_voidStopTimer(void)
 {
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62

	 /*Stop TCNT0 Reg counting by loading zeros in CS00,CS01,CS02*/
 	 TCCR0B = TIMER0_uint8_tTCCR0B_Value & TIMER0_STOP_MASK;
     a94:	e5 e4       	ldi	r30, 0x45	; 69
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 91 25 03 	lds	r24, 0x0325
     a9c:	88 7f       	andi	r24, 0xF8	; 248
     a9e:	80 83       	st	Z, r24


 }
     aa0:	cf 91       	pop	r28
     aa2:	df 91       	pop	r29
     aa4:	08 95       	ret

00000aa6 <TIMER0_voidInitializeTIMER0>:
 * Description : Initialize TIMER0 with pre configured values in cofig file
 * Arguments   : void
 * return      : void
 ***********************************************************************************/
 void TIMER0_voidInitializeTIMER0(void)
 {
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	0f 92       	push	r0
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
	 TCNT0=0;
     ab0:	e6 e4       	ldi	r30, 0x46	; 70
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	10 82       	st	Z, r1

	/*TCCR2B Prescaler value is stored temporarily in TIMER0_uint8_tTCCR0B_Value variable*/
	/*Initialize TCCR2B_ value*/
	/*Reset first 3 BITS*/
	TIMER0_uint8_tTCCR0B_Value &= TIMER0_TCCR0B_MASK;
     ab6:	80 91 25 03 	lds	r24, 0x0325
     aba:	88 7f       	andi	r24, 0xF8	; 248
     abc:	80 93 25 03 	sts	0x0325, r24


	/*Mask Prescaler value*/
	TIMER0_uint8_tTCCR0B_Value |= TIMER0_PRESCALER;
     ac0:	80 91 25 03 	lds	r24, 0x0325
     ac4:	85 60       	ori	r24, 0x05	; 5
     ac6:	80 93 25 03 	sts	0x0325, r24


	/*====================================================================
	 * calculate Prescaler value that will be used later in equations
	 *====================================================================*/
	TIMER0_u16Prescaler = 1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	90 93 0b 03 	sts	0x030B, r25
     ad2:	80 93 0a 03 	sts	0x030A, r24
		TIMER0_u16Prescaler = 8;

	#elif (TIMER0_PRESCALER>Prescaller_8 && TIMER0_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER0_PRESCALER*2);i++)
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <TIMER0_voidInitializeTIMER0+0x4e>
		{
			TIMER0_u16Prescaler *= 2;
     ada:	80 91 0a 03 	lds	r24, 0x030A
     ade:	90 91 0b 03 	lds	r25, 0x030B
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	90 93 0b 03 	sts	0x030B, r25
     aea:	80 93 0a 03 	sts	0x030A, r24
		TIMER0_u16Prescaler = 8;

	#elif (TIMER0_PRESCALER>Prescaller_8 && TIMER0_PRESCALER<=Prescaller_1024)

		/*caclulate prescaler = 2^(2*Prescaller)*/
		for (uint8_t i=0;i<(TIMER0_PRESCALER*2);i++)
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	89 83       	std	Y+1, r24	; 0x01
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	8a 30       	cpi	r24, 0x0A	; 10
     af8:	80 f3       	brcs	.-32     	; 0xada <TIMER0_voidInitializeTIMER0+0x34>
		CLEAR_BIT(TIMER0_uint8_tTCCR0B_Value,TIMER0_WGM22);

	#elif (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

		/*Choose Fast PWM mode*/
		SET_BIT(TIMER0_uint8_tTCCR0A_Value,TIMER0_WGM00);
     afa:	80 91 24 03 	lds	r24, 0x0324
     afe:	81 60       	ori	r24, 0x01	; 1
     b00:	80 93 24 03 	sts	0x0324, r24
		SET_BIT(TIMER0_uint8_tTCCR0A_Value,TIMER0_WGM01);
     b04:	80 91 24 03 	lds	r24, 0x0324
     b08:	82 60       	ori	r24, 0x02	; 2
     b0a:	80 93 24 03 	sts	0x0324, r24
		SET_BIT(TIMER0_uint8_tTCCR0B_Value,TIMER0_WGM02);
     b0e:	80 91 25 03 	lds	r24, 0x0325
     b12:	88 60       	ori	r24, 0x08	; 8
     b14:	80 93 25 03 	sts	0x0325, r24
		//SET_BIT(DDRB_OCA0,7);
		OCR0A = TIMER0_OCR0A_VALUE;
     b18:	e7 e4       	ldi	r30, 0x47	; 71
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	8b e9       	ldi	r24, 0x9B	; 155
     b1e:	80 83       	st	Z, r24
#if TIMER0_ChannalB
		SET_BIT(DDRG_OCB0,5);
     b20:	a3 e3       	ldi	r26, 0x33	; 51
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e3 e3       	ldi	r30, 0x33	; 51
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	80 62       	ori	r24, 0x20	; 32
     b2c:	8c 93       	st	X, r24
	#endif


	/*Choose OC0A, OC0B Pin Mode*/
	/*mask COM.A0,COM0A1,COM0B0,COM0B1 bits with zeros*/
	TIMER0_uint8_tTCCR0A_Value &= TIMER0_COM_MASK;
     b2e:	80 91 24 03 	lds	r24, 0x0324
     b32:	8f 70       	andi	r24, 0x0F	; 15
     b34:	80 93 24 03 	sts	0x0324, r24
	/*Put mode in COM2A0,COM2A1 bits*/
	TIMER0_uint8_tTCCR0A_Value |= (TIMER0_OC0A_MODE<<6) ;
     b38:	80 91 24 03 	lds	r24, 0x0324
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	80 93 24 03 	sts	0x0324, r24
	/*Put mode in COM2B0,COM2B1 bits*/
	TIMER0_uint8_tTCCR0A_Value |= (TIMER0_OC0B_MODE<<4) ;
     b42:	80 91 24 03 	lds	r24, 0x0324
     b46:	80 62       	ori	r24, 0x20	; 32
     b48:	80 93 24 03 	sts	0x0324, r24



 }/*TIMER0_voidInitializeTIMER0*/
     b4c:	0f 90       	pop	r0
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <TIMER0_voidFastPWM>:
 * Description : output Fast PWM on OC0 pin with duty cycle of Copy_uint8_tDutyCycle
 * Arguments   : DutyCycle: determine PWM duty cycle from 0 to 100
 * return      : void
 */
 void TIMER0_voidFastPWM(uint8_t Copy_uint8_tDutyCycle)
  {
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	89 83       	std	Y+1, r24	; 0x01
// 		 //OCR0A = (Copy_uint8_tDutyCycle*TIMER0_REG_CAPACITY)/100;
// 	 }
 	 //else if(channel == Channel_B){
 		 /*configure PWM Duty Cycle*/
 		 //OCR0B = (Copy_uint8_tDutyCycle*TIMER0_OCR0A_VALUE)/100;
 		OCR0B = Copy_uint8_tDutyCycle;
     b60:	e8 e4       	ldi	r30, 0x48	; 72
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	80 83       	st	Z, r24
 	 //}else return;
 	 /*Start PWM*/
 	 TIMER0_voidStartTimer();
     b68:	0e 94 35 05 	call	0xa6a	; 0xa6a <TIMER0_voidStartTimer>

  }/*end of TIMER0_voidFastPWM()*/
     b6c:	0f 90       	pop	r0
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <pin_init>:
 */

#include "DIO.h"


void pin_init(PIN_Config_t * Pin) {
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	00 d0       	rcall	.+0      	; 0xb7a <pin_init+0x6>
     b7a:	0f 92       	push	r0
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01

	switch(Pin -> port){
     b84:	e9 81       	ldd	r30, Y+1	; 0x01
     b86:	fa 81       	ldd	r31, Y+2	; 0x02
     b88:	83 81       	ldd	r24, Z+3	; 0x03
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	3c 83       	std	Y+4, r19	; 0x04
     b90:	2b 83       	std	Y+3, r18	; 0x03
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	9c 81       	ldd	r25, Y+4	; 0x04
     b96:	85 30       	cpi	r24, 0x05	; 5
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <pin_init+0x2a>
     b9c:	47 c1       	rjmp	.+654    	; 0xe2c <pin_init+0x2b8>
     b9e:	2b 81       	ldd	r18, Y+3	; 0x03
     ba0:	3c 81       	ldd	r19, Y+4	; 0x04
     ba2:	26 30       	cpi	r18, 0x06	; 6
     ba4:	31 05       	cpc	r19, r1
     ba6:	1c f5       	brge	.+70     	; 0xbee <pin_init+0x7a>
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	91 05       	cpc	r25, r1
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <pin_init+0x40>
     bb2:	a6 c0       	rjmp	.+332    	; 0xd00 <pin_init+0x18c>
     bb4:	2b 81       	ldd	r18, Y+3	; 0x03
     bb6:	3c 81       	ldd	r19, Y+4	; 0x04
     bb8:	23 30       	cpi	r18, 0x03	; 3
     bba:	31 05       	cpc	r19, r1
     bbc:	5c f4       	brge	.+22     	; 0xbd4 <pin_init+0x60>
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	c9 f1       	breq	.+114    	; 0xc38 <pin_init+0xc4>
     bc6:	2b 81       	ldd	r18, Y+3	; 0x03
     bc8:	3c 81       	ldd	r19, Y+4	; 0x04
     bca:	21 30       	cpi	r18, 0x01	; 1
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <pin_init+0x5e>
     bd0:	65 c0       	rjmp	.+202    	; 0xc9c <pin_init+0x128>
     bd2:	57 c2       	rjmp	.+1198   	; 0x1082 <pin_init+0x50e>
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	91 05       	cpc	r25, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <pin_init+0x6c>
     bde:	c2 c0       	rjmp	.+388    	; 0xd64 <pin_init+0x1f0>
     be0:	2b 81       	ldd	r18, Y+3	; 0x03
     be2:	3c 81       	ldd	r19, Y+4	; 0x04
     be4:	24 30       	cpi	r18, 0x04	; 4
     be6:	31 05       	cpc	r19, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <pin_init+0x78>
     bea:	ee c0       	rjmp	.+476    	; 0xdc8 <pin_init+0x254>
     bec:	4a c2       	rjmp	.+1172   	; 0x1082 <pin_init+0x50e>
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	88 30       	cpi	r24, 0x08	; 8
     bf4:	91 05       	cpc	r25, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <pin_init+0x86>
     bf8:	af c1       	rjmp	.+862    	; 0xf58 <pin_init+0x3e4>
     bfa:	2b 81       	ldd	r18, Y+3	; 0x03
     bfc:	3c 81       	ldd	r19, Y+4	; 0x04
     bfe:	29 30       	cpi	r18, 0x09	; 9
     c00:	31 05       	cpc	r19, r1
     c02:	6c f4       	brge	.+26     	; 0xc1e <pin_init+0xaa>
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	86 30       	cpi	r24, 0x06	; 6
     c0a:	91 05       	cpc	r25, r1
     c0c:	09 f4       	brne	.+2      	; 0xc10 <pin_init+0x9c>
     c0e:	40 c1       	rjmp	.+640    	; 0xe90 <pin_init+0x31c>
     c10:	2b 81       	ldd	r18, Y+3	; 0x03
     c12:	3c 81       	ldd	r19, Y+4	; 0x04
     c14:	27 30       	cpi	r18, 0x07	; 7
     c16:	31 05       	cpc	r19, r1
     c18:	09 f4       	brne	.+2      	; 0xc1c <pin_init+0xa8>
     c1a:	6c c1       	rjmp	.+728    	; 0xef4 <pin_init+0x380>
     c1c:	32 c2       	rjmp	.+1124   	; 0x1082 <pin_init+0x50e>
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	89 30       	cpi	r24, 0x09	; 9
     c24:	91 05       	cpc	r25, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <pin_init+0xb6>
     c28:	c9 c1       	rjmp	.+914    	; 0xfbc <pin_init+0x448>
     c2a:	2b 81       	ldd	r18, Y+3	; 0x03
     c2c:	3c 81       	ldd	r19, Y+4	; 0x04
     c2e:	2a 30       	cpi	r18, 0x0A	; 10
     c30:	31 05       	cpc	r19, r1
     c32:	09 f4       	brne	.+2      	; 0xc36 <pin_init+0xc2>
     c34:	f5 c1       	rjmp	.+1002   	; 0x1020 <pin_init+0x4ac>
     c36:	25 c2       	rjmp	.+1098   	; 0x1082 <pin_init+0x50e>
	case A:
		if(Pin->direction){
     c38:	e9 81       	ldd	r30, Y+1	; 0x01
     c3a:	fa 81       	ldd	r31, Y+2	; 0x02
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	b1 f0       	breq	.+44     	; 0xc6e <pin_init+0xfa>
			SET_BIT(DIR_A, Pin->pin_num);
     c42:	a1 e2       	ldi	r26, 0x21	; 33
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e1 e2       	ldi	r30, 0x21	; 33
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	48 2f       	mov	r20, r24
     c4e:	e9 81       	ldd	r30, Y+1	; 0x01
     c50:	fa 81       	ldd	r31, Y+2	; 0x02
     c52:	81 81       	ldd	r24, Z+1	; 0x01
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <pin_init+0xf0>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <pin_init+0xec>
     c68:	84 2b       	or	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	0a c2       	rjmp	.+1044   	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_A, Pin->pin_num);
     c6e:	a1 e2       	ldi	r26, 0x21	; 33
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e1 e2       	ldi	r30, 0x21	; 33
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	81 81       	ldd	r24, Z+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 2e       	mov	r0, r18
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <pin_init+0x11c>
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <pin_init+0x118>
     c94:	80 95       	com	r24
     c96:	84 23       	and	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	f3 c1       	rjmp	.+998    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case B:
		if(Pin->direction){
     c9c:	e9 81       	ldd	r30, Y+1	; 0x01
     c9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ca0:	80 81       	ld	r24, Z
     ca2:	88 23       	and	r24, r24
     ca4:	b1 f0       	breq	.+44     	; 0xcd2 <pin_init+0x15e>
			SET_BIT(DIR_B, Pin->pin_num);
     ca6:	a4 e2       	ldi	r26, 0x24	; 36
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e4 e2       	ldi	r30, 0x24	; 36
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	e9 81       	ldd	r30, Y+1	; 0x01
     cb4:	fa 81       	ldd	r31, Y+2	; 0x02
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <pin_init+0x154>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <pin_init+0x150>
     ccc:	84 2b       	or	r24, r20
     cce:	8c 93       	st	X, r24
     cd0:	d8 c1       	rjmp	.+944    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_B, Pin->pin_num);
     cd2:	a4 e2       	ldi	r26, 0x24	; 36
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e4 e2       	ldi	r30, 0x24	; 36
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 2e       	mov	r0, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <pin_init+0x180>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <pin_init+0x17c>
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8c 93       	st	X, r24
     cfe:	c1 c1       	rjmp	.+898    	; 0x1082 <pin_init+0x50e>
		}
		break;
		break;
	case C:
		if(Pin->direction){
     d00:	e9 81       	ldd	r30, Y+1	; 0x01
     d02:	fa 81       	ldd	r31, Y+2	; 0x02
     d04:	80 81       	ld	r24, Z
     d06:	88 23       	and	r24, r24
     d08:	b1 f0       	breq	.+44     	; 0xd36 <pin_init+0x1c2>
			SET_BIT(DIR_C, Pin->pin_num);
     d0a:	a7 e2       	ldi	r26, 0x27	; 39
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e2       	ldi	r30, 0x27	; 39
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	e9 81       	ldd	r30, Y+1	; 0x01
     d18:	fa 81       	ldd	r31, Y+2	; 0x02
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <pin_init+0x1b8>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <pin_init+0x1b4>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	a6 c1       	rjmp	.+844    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_C, Pin->pin_num);
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	e9 81       	ldd	r30, Y+1	; 0x01
     d44:	fa 81       	ldd	r31, Y+2	; 0x02
     d46:	81 81       	ldd	r24, Z+1	; 0x01
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 2e       	mov	r0, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <pin_init+0x1e4>
     d54:	88 0f       	add	r24, r24
     d56:	99 1f       	adc	r25, r25
     d58:	0a 94       	dec	r0
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <pin_init+0x1e0>
     d5c:	80 95       	com	r24
     d5e:	84 23       	and	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	8f c1       	rjmp	.+798    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case D:
		if(Pin->direction){
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	80 81       	ld	r24, Z
     d6a:	88 23       	and	r24, r24
     d6c:	b1 f0       	breq	.+44     	; 0xd9a <pin_init+0x226>
			SET_BIT(DIR_D, Pin->pin_num);
     d6e:	aa e2       	ldi	r26, 0x2A	; 42
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ea e2       	ldi	r30, 0x2A	; 42
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	e9 81       	ldd	r30, Y+1	; 0x01
     d7c:	fa 81       	ldd	r31, Y+2	; 0x02
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <pin_init+0x21c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <pin_init+0x218>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	74 c1       	rjmp	.+744    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_D, Pin->pin_num);
     d9a:	aa e2       	ldi	r26, 0x2A	; 42
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e2       	ldi	r30, 0x2A	; 42
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	e9 81       	ldd	r30, Y+1	; 0x01
     da8:	fa 81       	ldd	r31, Y+2	; 0x02
     daa:	81 81       	ldd	r24, Z+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <pin_init+0x248>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <pin_init+0x244>
     dc0:	80 95       	com	r24
     dc2:	84 23       	and	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	5d c1       	rjmp	.+698    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case E:
		if(Pin->direction){
     dc8:	e9 81       	ldd	r30, Y+1	; 0x01
     dca:	fa 81       	ldd	r31, Y+2	; 0x02
     dcc:	80 81       	ld	r24, Z
     dce:	88 23       	and	r24, r24
     dd0:	b1 f0       	breq	.+44     	; 0xdfe <pin_init+0x28a>
			SET_BIT(DIR_E, Pin->pin_num);
     dd2:	ad e2       	ldi	r26, 0x2D	; 45
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ed e2       	ldi	r30, 0x2D	; 45
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	e9 81       	ldd	r30, Y+1	; 0x01
     de0:	fa 81       	ldd	r31, Y+2	; 0x02
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <pin_init+0x280>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <pin_init+0x27c>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	42 c1       	rjmp	.+644    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_E, Pin->pin_num);
     dfe:	ad e2       	ldi	r26, 0x2D	; 45
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	ed e2       	ldi	r30, 0x2D	; 45
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	fa 81       	ldd	r31, Y+2	; 0x02
     e0e:	81 81       	ldd	r24, Z+1	; 0x01
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <pin_init+0x2ac>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <pin_init+0x2a8>
     e24:	80 95       	com	r24
     e26:	84 23       	and	r24, r20
     e28:	8c 93       	st	X, r24
     e2a:	2b c1       	rjmp	.+598    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case F:
		if(Pin->direction){
     e2c:	e9 81       	ldd	r30, Y+1	; 0x01
     e2e:	fa 81       	ldd	r31, Y+2	; 0x02
     e30:	80 81       	ld	r24, Z
     e32:	88 23       	and	r24, r24
     e34:	b1 f0       	breq	.+44     	; 0xe62 <pin_init+0x2ee>
			SET_BIT(DIR_F, Pin->pin_num);
     e36:	a0 e3       	ldi	r26, 0x30	; 48
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e0 e3       	ldi	r30, 0x30	; 48
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <pin_init+0x2e4>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <pin_init+0x2e0>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	10 c1       	rjmp	.+544    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_F, Pin->pin_num);
     e62:	a0 e3       	ldi	r26, 0x30	; 48
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e0 e3       	ldi	r30, 0x30	; 48
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <pin_init+0x310>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <pin_init+0x30c>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	f9 c0       	rjmp	.+498    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case G:
		if(Pin->direction){
     e90:	e9 81       	ldd	r30, Y+1	; 0x01
     e92:	fa 81       	ldd	r31, Y+2	; 0x02
     e94:	80 81       	ld	r24, Z
     e96:	88 23       	and	r24, r24
     e98:	b1 f0       	breq	.+44     	; 0xec6 <pin_init+0x352>
			SET_BIT(DIR_G, Pin->pin_num);
     e9a:	a3 e3       	ldi	r26, 0x33	; 51
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e3       	ldi	r30, 0x33	; 51
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	e9 81       	ldd	r30, Y+1	; 0x01
     ea8:	fa 81       	ldd	r31, Y+2	; 0x02
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <pin_init+0x348>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <pin_init+0x344>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	de c0       	rjmp	.+444    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_G, Pin->pin_num);
     ec6:	a3 e3       	ldi	r26, 0x33	; 51
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e3 e3       	ldi	r30, 0x33	; 51
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	e9 81       	ldd	r30, Y+1	; 0x01
     ed4:	fa 81       	ldd	r31, Y+2	; 0x02
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <pin_init+0x374>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <pin_init+0x370>
     eec:	80 95       	com	r24
     eee:	84 23       	and	r24, r20
     ef0:	8c 93       	st	X, r24
     ef2:	c7 c0       	rjmp	.+398    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case H:
		if(Pin->direction){
     ef4:	e9 81       	ldd	r30, Y+1	; 0x01
     ef6:	fa 81       	ldd	r31, Y+2	; 0x02
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	b1 f0       	breq	.+44     	; 0xf2a <pin_init+0x3b6>
			SET_BIT(DIR_H, Pin->pin_num);
     efe:	a1 e0       	ldi	r26, 0x01	; 1
     f00:	b1 e0       	ldi	r27, 0x01	; 1
     f02:	e1 e0       	ldi	r30, 0x01	; 1
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <pin_init+0x3ac>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <pin_init+0x3a8>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	ac c0       	rjmp	.+344    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_H, Pin->pin_num);
     f2a:	a1 e0       	ldi	r26, 0x01	; 1
     f2c:	b1 e0       	ldi	r27, 0x01	; 1
     f2e:	e1 e0       	ldi	r30, 0x01	; 1
     f30:	f1 e0       	ldi	r31, 0x01	; 1
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	e9 81       	ldd	r30, Y+1	; 0x01
     f38:	fa 81       	ldd	r31, Y+2	; 0x02
     f3a:	81 81       	ldd	r24, Z+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <pin_init+0x3d8>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <pin_init+0x3d4>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	95 c0       	rjmp	.+298    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case J:
		if(Pin->direction){
     f58:	e9 81       	ldd	r30, Y+1	; 0x01
     f5a:	fa 81       	ldd	r31, Y+2	; 0x02
     f5c:	80 81       	ld	r24, Z
     f5e:	88 23       	and	r24, r24
     f60:	b1 f0       	breq	.+44     	; 0xf8e <pin_init+0x41a>
			SET_BIT(DIR_J, Pin->pin_num);
     f62:	a4 e0       	ldi	r26, 0x04	; 4
     f64:	b1 e0       	ldi	r27, 0x01	; 1
     f66:	e4 e0       	ldi	r30, 0x04	; 4
     f68:	f1 e0       	ldi	r31, 0x01	; 1
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <pin_init+0x410>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <pin_init+0x40c>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	7a c0       	rjmp	.+244    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_J, Pin->pin_num);
     f8e:	a4 e0       	ldi	r26, 0x04	; 4
     f90:	b1 e0       	ldi	r27, 0x01	; 1
     f92:	e4 e0       	ldi	r30, 0x04	; 4
     f94:	f1 e0       	ldi	r31, 0x01	; 1
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	81 81       	ldd	r24, Z+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <pin_init+0x43c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <pin_init+0x438>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	63 c0       	rjmp	.+198    	; 0x1082 <pin_init+0x50e>
		}
		break;
	case K:
		if(Pin->direction){
     fbc:	e9 81       	ldd	r30, Y+1	; 0x01
     fbe:	fa 81       	ldd	r31, Y+2	; 0x02
     fc0:	80 81       	ld	r24, Z
     fc2:	88 23       	and	r24, r24
     fc4:	b1 f0       	breq	.+44     	; 0xff2 <pin_init+0x47e>
			SET_BIT(DIR_K, Pin->pin_num);
     fc6:	a7 e0       	ldi	r26, 0x07	; 7
     fc8:	b1 e0       	ldi	r27, 0x01	; 1
     fca:	e7 e0       	ldi	r30, 0x07	; 7
     fcc:	f1 e0       	ldi	r31, 0x01	; 1
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	e9 81       	ldd	r30, Y+1	; 0x01
     fd4:	fa 81       	ldd	r31, Y+2	; 0x02
     fd6:	81 81       	ldd	r24, Z+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <pin_init+0x474>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <pin_init+0x470>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	48 c0       	rjmp	.+144    	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_K, Pin->pin_num);
     ff2:	a7 e0       	ldi	r26, 0x07	; 7
     ff4:	b1 e0       	ldi	r27, 0x01	; 1
     ff6:	e7 e0       	ldi	r30, 0x07	; 7
     ff8:	f1 e0       	ldi	r31, 0x01	; 1
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	e9 81       	ldd	r30, Y+1	; 0x01
    1000:	fa 81       	ldd	r31, Y+2	; 0x02
    1002:	81 81       	ldd	r24, Z+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <pin_init+0x4a0>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <pin_init+0x49c>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	31 c0       	rjmp	.+98     	; 0x1082 <pin_init+0x50e>
		}
		break;
	case L:
		if(Pin->direction){
    1020:	e9 81       	ldd	r30, Y+1	; 0x01
    1022:	fa 81       	ldd	r31, Y+2	; 0x02
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	b1 f0       	breq	.+44     	; 0x1056 <pin_init+0x4e2>
			SET_BIT(DIR_L, Pin->pin_num);
    102a:	aa e0       	ldi	r26, 0x0A	; 10
    102c:	b1 e0       	ldi	r27, 0x01	; 1
    102e:	ea e0       	ldi	r30, 0x0A	; 10
    1030:	f1 e0       	ldi	r31, 0x01	; 1
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	81 81       	ldd	r24, Z+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <pin_init+0x4d8>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <pin_init+0x4d4>
    1050:	84 2b       	or	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	16 c0       	rjmp	.+44     	; 0x1082 <pin_init+0x50e>
		}else{
			CLEAR_BIT(DIR_L, Pin->pin_num);
    1056:	aa e0       	ldi	r26, 0x0A	; 10
    1058:	b1 e0       	ldi	r27, 0x01	; 1
    105a:	ea e0       	ldi	r30, 0x0A	; 10
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	e9 81       	ldd	r30, Y+1	; 0x01
    1064:	fa 81       	ldd	r31, Y+2	; 0x02
    1066:	81 81       	ldd	r24, Z+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <pin_init+0x504>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <pin_init+0x500>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
		}
		break;
	}
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <port_init>:

void port_init(PORT_Config_t * Port) {
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <port_init+0x6>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
	switch(Port -> port){
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	2b 83       	std	Y+3, r18	; 0x03
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	85 30       	cpi	r24, 0x05	; 5
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <port_init+0x2a>
    10b8:	6f c0       	rjmp	.+222    	; 0x1198 <port_init+0x108>
    10ba:	2b 81       	ldd	r18, Y+3	; 0x03
    10bc:	3c 81       	ldd	r19, Y+4	; 0x04
    10be:	26 30       	cpi	r18, 0x06	; 6
    10c0:	31 05       	cpc	r19, r1
    10c2:	14 f5       	brge	.+68     	; 0x1108 <port_init+0x78>
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <port_init+0x40>
    10ce:	4f c0       	rjmp	.+158    	; 0x116e <port_init+0xde>
    10d0:	2b 81       	ldd	r18, Y+3	; 0x03
    10d2:	3c 81       	ldd	r19, Y+4	; 0x04
    10d4:	23 30       	cpi	r18, 0x03	; 3
    10d6:	31 05       	cpc	r19, r1
    10d8:	54 f4       	brge	.+20     	; 0x10ee <port_init+0x5e>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	c1 f1       	breq	.+112    	; 0x1152 <port_init+0xc2>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	21 30       	cpi	r18, 0x01	; 1
    10e8:	31 05       	cpc	r19, r1
    10ea:	d1 f1       	breq	.+116    	; 0x1160 <port_init+0xd0>
    10ec:	7e c0       	rjmp	.+252    	; 0x11ea <port_init+0x15a>
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	91 05       	cpc	r25, r1
    10f6:	09 f4       	brne	.+2      	; 0x10fa <port_init+0x6a>
    10f8:	41 c0       	rjmp	.+130    	; 0x117c <port_init+0xec>
    10fa:	2b 81       	ldd	r18, Y+3	; 0x03
    10fc:	3c 81       	ldd	r19, Y+4	; 0x04
    10fe:	24 30       	cpi	r18, 0x04	; 4
    1100:	31 05       	cpc	r19, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <port_init+0x76>
    1104:	42 c0       	rjmp	.+132    	; 0x118a <port_init+0xfa>
    1106:	71 c0       	rjmp	.+226    	; 0x11ea <port_init+0x15a>
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	9c 81       	ldd	r25, Y+4	; 0x04
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	91 05       	cpc	r25, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <port_init+0x84>
    1112:	57 c0       	rjmp	.+174    	; 0x11c2 <port_init+0x132>
    1114:	2b 81       	ldd	r18, Y+3	; 0x03
    1116:	3c 81       	ldd	r19, Y+4	; 0x04
    1118:	29 30       	cpi	r18, 0x09	; 9
    111a:	31 05       	cpc	r19, r1
    111c:	6c f4       	brge	.+26     	; 0x1138 <port_init+0xa8>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	86 30       	cpi	r24, 0x06	; 6
    1124:	91 05       	cpc	r25, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <port_init+0x9a>
    1128:	3e c0       	rjmp	.+124    	; 0x11a6 <port_init+0x116>
    112a:	2b 81       	ldd	r18, Y+3	; 0x03
    112c:	3c 81       	ldd	r19, Y+4	; 0x04
    112e:	27 30       	cpi	r18, 0x07	; 7
    1130:	31 05       	cpc	r19, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <port_init+0xa6>
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <port_init+0x124>
    1136:	59 c0       	rjmp	.+178    	; 0x11ea <port_init+0x15a>
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	89 30       	cpi	r24, 0x09	; 9
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <port_init+0xb4>
    1142:	46 c0       	rjmp	.+140    	; 0x11d0 <port_init+0x140>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	2a 30       	cpi	r18, 0x0A	; 10
    114a:	31 05       	cpc	r19, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <port_init+0xc0>
    114e:	47 c0       	rjmp	.+142    	; 0x11de <port_init+0x14e>
    1150:	4c c0       	rjmp	.+152    	; 0x11ea <port_init+0x15a>
		case A:
			DIR_A = Port->direction;
    1152:	e1 e2       	ldi	r30, 0x21	; 33
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	a9 81       	ldd	r26, Y+1	; 0x01
    1158:	ba 81       	ldd	r27, Y+2	; 0x02
    115a:	8c 91       	ld	r24, X
    115c:	80 83       	st	Z, r24
    115e:	45 c0       	rjmp	.+138    	; 0x11ea <port_init+0x15a>
			break;
		case B:
			DIR_B = Port->direction;
    1160:	e4 e2       	ldi	r30, 0x24	; 36
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	a9 81       	ldd	r26, Y+1	; 0x01
    1166:	ba 81       	ldd	r27, Y+2	; 0x02
    1168:	8c 91       	ld	r24, X
    116a:	80 83       	st	Z, r24
    116c:	3e c0       	rjmp	.+124    	; 0x11ea <port_init+0x15a>
			break;
		case C:
			DIR_C = Port->direction;
    116e:	e7 e2       	ldi	r30, 0x27	; 39
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	a9 81       	ldd	r26, Y+1	; 0x01
    1174:	ba 81       	ldd	r27, Y+2	; 0x02
    1176:	8c 91       	ld	r24, X
    1178:	80 83       	st	Z, r24
    117a:	37 c0       	rjmp	.+110    	; 0x11ea <port_init+0x15a>
			break;
		case D:
			DIR_D = Port->direction;
    117c:	ea e2       	ldi	r30, 0x2A	; 42
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	a9 81       	ldd	r26, Y+1	; 0x01
    1182:	ba 81       	ldd	r27, Y+2	; 0x02
    1184:	8c 91       	ld	r24, X
    1186:	80 83       	st	Z, r24
    1188:	30 c0       	rjmp	.+96     	; 0x11ea <port_init+0x15a>
			break;
		case E:
			DIR_E = Port->direction;
    118a:	ed e2       	ldi	r30, 0x2D	; 45
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	a9 81       	ldd	r26, Y+1	; 0x01
    1190:	ba 81       	ldd	r27, Y+2	; 0x02
    1192:	8c 91       	ld	r24, X
    1194:	80 83       	st	Z, r24
    1196:	29 c0       	rjmp	.+82     	; 0x11ea <port_init+0x15a>
			break;
		case F:
			DIR_F = Port->direction;
    1198:	e0 e3       	ldi	r30, 0x30	; 48
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	a9 81       	ldd	r26, Y+1	; 0x01
    119e:	ba 81       	ldd	r27, Y+2	; 0x02
    11a0:	8c 91       	ld	r24, X
    11a2:	80 83       	st	Z, r24
    11a4:	22 c0       	rjmp	.+68     	; 0x11ea <port_init+0x15a>
			break;
		case G:
			DIR_G = Port->direction;
    11a6:	e3 e3       	ldi	r30, 0x33	; 51
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	a9 81       	ldd	r26, Y+1	; 0x01
    11ac:	ba 81       	ldd	r27, Y+2	; 0x02
    11ae:	8c 91       	ld	r24, X
    11b0:	80 83       	st	Z, r24
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <port_init+0x15a>
			break;
		case H:
			DIR_H = Port->direction;
    11b4:	e1 e0       	ldi	r30, 0x01	; 1
    11b6:	f1 e0       	ldi	r31, 0x01	; 1
    11b8:	a9 81       	ldd	r26, Y+1	; 0x01
    11ba:	ba 81       	ldd	r27, Y+2	; 0x02
    11bc:	8c 91       	ld	r24, X
    11be:	80 83       	st	Z, r24
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <port_init+0x15a>
			break;
		case J:
			DIR_J = Port->direction;
    11c2:	e4 e0       	ldi	r30, 0x04	; 4
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	a9 81       	ldd	r26, Y+1	; 0x01
    11c8:	ba 81       	ldd	r27, Y+2	; 0x02
    11ca:	8c 91       	ld	r24, X
    11cc:	80 83       	st	Z, r24
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <port_init+0x15a>
			break;
		case K:
			DIR_K = Port->direction;
    11d0:	e7 e0       	ldi	r30, 0x07	; 7
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	a9 81       	ldd	r26, Y+1	; 0x01
    11d6:	ba 81       	ldd	r27, Y+2	; 0x02
    11d8:	8c 91       	ld	r24, X
    11da:	80 83       	st	Z, r24
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <port_init+0x15a>
			break;
		case L:
			DIR_L = Port->direction;
    11de:	ea e0       	ldi	r30, 0x0A	; 10
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	a9 81       	ldd	r26, Y+1	; 0x01
    11e4:	ba 81       	ldd	r27, Y+2	; 0x02
    11e6:	8c 91       	ld	r24, X
    11e8:	80 83       	st	Z, r24
			break;
		}
}
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <pin_read>:

uint8_t pin_read(PIN_Config_t * Pin) {
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <pin_read+0x6>
    11fe:	0f 92       	push	r0
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
	switch(Pin -> port){
    120a:	e9 81       	ldd	r30, Y+1	; 0x01
    120c:	fa 81       	ldd	r31, Y+2	; 0x02
    120e:	83 81       	ldd	r24, Z+3	; 0x03
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3d 83       	std	Y+5, r19	; 0x05
    1216:	2c 83       	std	Y+4, r18	; 0x04
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	85 30       	cpi	r24, 0x05	; 5
    121e:	91 05       	cpc	r25, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <pin_read+0x2c>
    1222:	b1 c0       	rjmp	.+354    	; 0x1386 <pin_read+0x18e>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	26 30       	cpi	r18, 0x06	; 6
    122a:	31 05       	cpc	r19, r1
    122c:	1c f5       	brge	.+70     	; 0x1274 <pin_read+0x7c>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	91 05       	cpc	r25, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <pin_read+0x42>
    1238:	6a c0       	rjmp	.+212    	; 0x130e <pin_read+0x116>
    123a:	2c 81       	ldd	r18, Y+4	; 0x04
    123c:	3d 81       	ldd	r19, Y+5	; 0x05
    123e:	23 30       	cpi	r18, 0x03	; 3
    1240:	31 05       	cpc	r19, r1
    1242:	5c f4       	brge	.+22     	; 0x125a <pin_read+0x62>
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	9d 81       	ldd	r25, Y+5	; 0x05
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	c9 f1       	breq	.+114    	; 0x12be <pin_read+0xc6>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	21 30       	cpi	r18, 0x01	; 1
    1252:	31 05       	cpc	r19, r1
    1254:	09 f4       	brne	.+2      	; 0x1258 <pin_read+0x60>
    1256:	47 c0       	rjmp	.+142    	; 0x12e6 <pin_read+0xee>
    1258:	0e c1       	rjmp	.+540    	; 0x1476 <pin_read+0x27e>
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <pin_read+0x6e>
    1264:	68 c0       	rjmp	.+208    	; 0x1336 <pin_read+0x13e>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	24 30       	cpi	r18, 0x04	; 4
    126c:	31 05       	cpc	r19, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <pin_read+0x7a>
    1270:	76 c0       	rjmp	.+236    	; 0x135e <pin_read+0x166>
    1272:	01 c1       	rjmp	.+514    	; 0x1476 <pin_read+0x27e>
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <pin_read+0x88>
    127e:	bf c0       	rjmp	.+382    	; 0x13fe <pin_read+0x206>
    1280:	2c 81       	ldd	r18, Y+4	; 0x04
    1282:	3d 81       	ldd	r19, Y+5	; 0x05
    1284:	29 30       	cpi	r18, 0x09	; 9
    1286:	31 05       	cpc	r19, r1
    1288:	6c f4       	brge	.+26     	; 0x12a4 <pin_read+0xac>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	86 30       	cpi	r24, 0x06	; 6
    1290:	91 05       	cpc	r25, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <pin_read+0x9e>
    1294:	8c c0       	rjmp	.+280    	; 0x13ae <pin_read+0x1b6>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	27 30       	cpi	r18, 0x07	; 7
    129c:	31 05       	cpc	r19, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <pin_read+0xaa>
    12a0:	9a c0       	rjmp	.+308    	; 0x13d6 <pin_read+0x1de>
    12a2:	e9 c0       	rjmp	.+466    	; 0x1476 <pin_read+0x27e>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	89 30       	cpi	r24, 0x09	; 9
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <pin_read+0xb8>
    12ae:	bb c0       	rjmp	.+374    	; 0x1426 <pin_read+0x22e>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	2a 30       	cpi	r18, 0x0A	; 10
    12b6:	31 05       	cpc	r19, r1
    12b8:	09 f4       	brne	.+2      	; 0x12bc <pin_read+0xc4>
    12ba:	c9 c0       	rjmp	.+402    	; 0x144e <pin_read+0x256>
    12bc:	dc c0       	rjmp	.+440    	; 0x1476 <pin_read+0x27e>
	case A:
		return BIT_IS_SET(BASE_A, Pin -> pin_num);
    12be:	e2 e2       	ldi	r30, 0x22	; 34
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	e9 81       	ldd	r30, Y+1	; 0x01
    12c8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ca:	81 81       	ldd	r24, Z+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <pin_read+0xe4>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <pin_read+0xe0>
    12e0:	84 23       	and	r24, r20
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	ca c0       	rjmp	.+404    	; 0x147a <pin_read+0x282>
	case B:
		return BIT_IS_SET(BASE_B, Pin -> pin_num);
    12e6:	e5 e2       	ldi	r30, 0x25	; 37
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <pin_read+0x10c>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <pin_read+0x108>
    1308:	84 23       	and	r24, r20
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	b6 c0       	rjmp	.+364    	; 0x147a <pin_read+0x282>
	case C:
		return BIT_IS_SET(BASE_C, Pin -> pin_num);
    130e:	e8 e2       	ldi	r30, 0x28	; 40
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	fa 81       	ldd	r31, Y+2	; 0x02
    131a:	81 81       	ldd	r24, Z+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <pin_read+0x134>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <pin_read+0x130>
    1330:	84 23       	and	r24, r20
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	a2 c0       	rjmp	.+324    	; 0x147a <pin_read+0x282>
	case D:
		return BIT_IS_SET(BASE_D, Pin -> pin_num);
    1336:	eb e2       	ldi	r30, 0x2B	; 43
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	81 81       	ldd	r24, Z+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <pin_read+0x15c>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <pin_read+0x158>
    1358:	84 23       	and	r24, r20
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8e c0       	rjmp	.+284    	; 0x147a <pin_read+0x282>
	case E:
		return BIT_IS_SET(BASE_E, Pin -> pin_num);
    135e:	ee e2       	ldi	r30, 0x2E	; 46
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	e9 81       	ldd	r30, Y+1	; 0x01
    1368:	fa 81       	ldd	r31, Y+2	; 0x02
    136a:	81 81       	ldd	r24, Z+1	; 0x01
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <pin_read+0x184>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <pin_read+0x180>
    1380:	84 23       	and	r24, r20
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	7a c0       	rjmp	.+244    	; 0x147a <pin_read+0x282>
	case F:
		return BIT_IS_SET(BASE_F, Pin -> pin_num);
    1386:	e1 e3       	ldi	r30, 0x31	; 49
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	e9 81       	ldd	r30, Y+1	; 0x01
    1390:	fa 81       	ldd	r31, Y+2	; 0x02
    1392:	81 81       	ldd	r24, Z+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <pin_read+0x1ac>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <pin_read+0x1a8>
    13a8:	84 23       	and	r24, r20
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	66 c0       	rjmp	.+204    	; 0x147a <pin_read+0x282>
	case G:
		return BIT_IS_SET(BASE_G, Pin -> pin_num);
    13ae:	e4 e3       	ldi	r30, 0x34	; 52
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	e9 81       	ldd	r30, Y+1	; 0x01
    13b8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <pin_read+0x1d4>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <pin_read+0x1d0>
    13d0:	84 23       	and	r24, r20
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	52 c0       	rjmp	.+164    	; 0x147a <pin_read+0x282>
	case H:
		return BIT_IS_SET(BASE_H, Pin -> pin_num);
    13d6:	e2 e0       	ldi	r30, 0x02	; 2
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	e9 81       	ldd	r30, Y+1	; 0x01
    13e0:	fa 81       	ldd	r31, Y+2	; 0x02
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <pin_read+0x1fc>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <pin_read+0x1f8>
    13f8:	84 23       	and	r24, r20
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	3e c0       	rjmp	.+124    	; 0x147a <pin_read+0x282>
	case J:
		return BIT_IS_SET(BASE_J, Pin -> pin_num);
    13fe:	e5 e0       	ldi	r30, 0x05	; 5
    1400:	f1 e0       	ldi	r31, 0x01	; 1
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	81 81       	ldd	r24, Z+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <pin_read+0x224>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <pin_read+0x220>
    1420:	84 23       	and	r24, r20
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	2a c0       	rjmp	.+84     	; 0x147a <pin_read+0x282>
	case K:
		return BIT_IS_SET(BASE_K, Pin -> pin_num);
    1426:	e8 e0       	ldi	r30, 0x08	; 8
    1428:	f1 e0       	ldi	r31, 0x01	; 1
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	81 81       	ldd	r24, Z+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <pin_read+0x24c>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <pin_read+0x248>
    1448:	84 23       	and	r24, r20
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	16 c0       	rjmp	.+44     	; 0x147a <pin_read+0x282>
	case L:
		return BIT_IS_SET(BASE_L, Pin -> pin_num);
    144e:	eb e0       	ldi	r30, 0x0B	; 11
    1450:	f1 e0       	ldi	r31, 0x01	; 1
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	81 81       	ldd	r24, Z+1	; 0x01
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <pin_read+0x274>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <pin_read+0x270>
    1470:	84 23       	and	r24, r20
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	02 c0       	rjmp	.+4      	; 0x147a <pin_read+0x282>
	}
	return 1;
    1476:	31 e0       	ldi	r19, 0x01	; 1
    1478:	3b 83       	std	Y+3, r19	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <Write_Pin>:
void Write_Pin(PORT_t port, uint8_t pin, uint8_t Data){
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <Write_Pin+0x6>
    1492:	0f 92       	push	r0
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
    149e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port){
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3d 83       	std	Y+5, r19	; 0x05
    14a8:	2c 83       	std	Y+4, r18	; 0x04
    14aa:	6c 81       	ldd	r22, Y+4	; 0x04
    14ac:	7d 81       	ldd	r23, Y+5	; 0x05
    14ae:	65 30       	cpi	r22, 0x05	; 5
    14b0:	71 05       	cpc	r23, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <Write_Pin+0x2a>
    14b4:	06 c1       	rjmp	.+524    	; 0x16c2 <Write_Pin+0x236>
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	86 30       	cpi	r24, 0x06	; 6
    14bc:	91 05       	cpc	r25, r1
    14be:	1c f5       	brge	.+70     	; 0x1506 <Write_Pin+0x7a>
    14c0:	2c 81       	ldd	r18, Y+4	; 0x04
    14c2:	3d 81       	ldd	r19, Y+5	; 0x05
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <Write_Pin+0x40>
    14ca:	8c c0       	rjmp	.+280    	; 0x15e4 <Write_Pin+0x158>
    14cc:	6c 81       	ldd	r22, Y+4	; 0x04
    14ce:	7d 81       	ldd	r23, Y+5	; 0x05
    14d0:	63 30       	cpi	r22, 0x03	; 3
    14d2:	71 05       	cpc	r23, r1
    14d4:	5c f4       	brge	.+22     	; 0x14ec <Write_Pin+0x60>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	c9 f1       	breq	.+114    	; 0x1550 <Write_Pin+0xc4>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	21 30       	cpi	r18, 0x01	; 1
    14e4:	31 05       	cpc	r19, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <Write_Pin+0x5e>
    14e8:	58 c0       	rjmp	.+176    	; 0x159a <Write_Pin+0x10e>
    14ea:	c8 c1       	rjmp	.+912    	; 0x187c <Write_Pin+0x3f0>
    14ec:	6c 81       	ldd	r22, Y+4	; 0x04
    14ee:	7d 81       	ldd	r23, Y+5	; 0x05
    14f0:	63 30       	cpi	r22, 0x03	; 3
    14f2:	71 05       	cpc	r23, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <Write_Pin+0x6c>
    14f6:	9b c0       	rjmp	.+310    	; 0x162e <Write_Pin+0x1a2>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	9d 81       	ldd	r25, Y+5	; 0x05
    14fc:	84 30       	cpi	r24, 0x04	; 4
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <Write_Pin+0x78>
    1502:	ba c0       	rjmp	.+372    	; 0x1678 <Write_Pin+0x1ec>
    1504:	bb c1       	rjmp	.+886    	; 0x187c <Write_Pin+0x3f0>
    1506:	2c 81       	ldd	r18, Y+4	; 0x04
    1508:	3d 81       	ldd	r19, Y+5	; 0x05
    150a:	28 30       	cpi	r18, 0x08	; 8
    150c:	31 05       	cpc	r19, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <Write_Pin+0x86>
    1510:	47 c1       	rjmp	.+654    	; 0x17a0 <Write_Pin+0x314>
    1512:	6c 81       	ldd	r22, Y+4	; 0x04
    1514:	7d 81       	ldd	r23, Y+5	; 0x05
    1516:	69 30       	cpi	r22, 0x09	; 9
    1518:	71 05       	cpc	r23, r1
    151a:	6c f4       	brge	.+26     	; 0x1536 <Write_Pin+0xaa>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	86 30       	cpi	r24, 0x06	; 6
    1522:	91 05       	cpc	r25, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <Write_Pin+0x9c>
    1526:	f2 c0       	rjmp	.+484    	; 0x170c <Write_Pin+0x280>
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	27 30       	cpi	r18, 0x07	; 7
    152e:	31 05       	cpc	r19, r1
    1530:	09 f4       	brne	.+2      	; 0x1534 <Write_Pin+0xa8>
    1532:	11 c1       	rjmp	.+546    	; 0x1756 <Write_Pin+0x2ca>
    1534:	a3 c1       	rjmp	.+838    	; 0x187c <Write_Pin+0x3f0>
    1536:	6c 81       	ldd	r22, Y+4	; 0x04
    1538:	7d 81       	ldd	r23, Y+5	; 0x05
    153a:	69 30       	cpi	r22, 0x09	; 9
    153c:	71 05       	cpc	r23, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <Write_Pin+0xb6>
    1540:	54 c1       	rjmp	.+680    	; 0x17ea <Write_Pin+0x35e>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	8a 30       	cpi	r24, 0x0A	; 10
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <Write_Pin+0xc2>
    154c:	73 c1       	rjmp	.+742    	; 0x1834 <Write_Pin+0x3a8>
    154e:	96 c1       	rjmp	.+812    	; 0x187c <Write_Pin+0x3f0>
	case A:
		BASE_A = (BASE_A & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1550:	a2 e2       	ldi	r26, 0x22	; 34
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e2 e2       	ldi	r30, 0x22	; 34
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <Write_Pin+0xe0>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	2a 95       	dec	r18
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <Write_Pin+0xdc>
    1570:	80 95       	com	r24
    1572:	48 23       	and	r20, r24
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9c 01       	movw	r18, r24
    157c:	21 70       	andi	r18, 0x01	; 1
    157e:	30 70       	andi	r19, 0x00	; 0
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	b9 01       	movw	r22, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <Write_Pin+0x102>
    158a:	66 0f       	add	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	8a 95       	dec	r24
    1590:	e2 f7       	brpl	.-8      	; 0x158a <Write_Pin+0xfe>
    1592:	cb 01       	movw	r24, r22
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	71 c1       	rjmp	.+738    	; 0x187c <Write_Pin+0x3f0>
		break;
	case B:
		BASE_B = (BASE_B & (~(1<<pin))) | ((Data & 0x01) <<pin);
    159a:	a5 e2       	ldi	r26, 0x25	; 37
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e5 e2       	ldi	r30, 0x25	; 37
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <Write_Pin+0x12a>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	2a 95       	dec	r18
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <Write_Pin+0x126>
    15ba:	80 95       	com	r24
    15bc:	48 23       	and	r20, r24
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9c 01       	movw	r18, r24
    15c6:	21 70       	andi	r18, 0x01	; 1
    15c8:	30 70       	andi	r19, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <Write_Pin+0x14c>
    15d4:	66 0f       	add	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <Write_Pin+0x148>
    15dc:	cb 01       	movw	r24, r22
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	4c c1       	rjmp	.+664    	; 0x187c <Write_Pin+0x3f0>
		break;
	case C:
		BASE_C = (BASE_C & (~(1<<pin))) | ((Data & 0x01) <<pin);
    15e4:	a8 e2       	ldi	r26, 0x28	; 40
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e2       	ldi	r30, 0x28	; 40
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <Write_Pin+0x174>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	2a 95       	dec	r18
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <Write_Pin+0x170>
    1604:	80 95       	com	r24
    1606:	48 23       	and	r20, r24
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9c 01       	movw	r18, r24
    1610:	21 70       	andi	r18, 0x01	; 1
    1612:	30 70       	andi	r19, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	b9 01       	movw	r22, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <Write_Pin+0x196>
    161e:	66 0f       	add	r22, r22
    1620:	77 1f       	adc	r23, r23
    1622:	8a 95       	dec	r24
    1624:	e2 f7       	brpl	.-8      	; 0x161e <Write_Pin+0x192>
    1626:	cb 01       	movw	r24, r22
    1628:	84 2b       	or	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	27 c1       	rjmp	.+590    	; 0x187c <Write_Pin+0x3f0>
		break;
	case D:
		BASE_D = (BASE_D & (~(1<<pin))) | ((Data & 0x01) <<pin);
    162e:	ab e2       	ldi	r26, 0x2B	; 43
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	eb e2       	ldi	r30, 0x2B	; 43
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <Write_Pin+0x1be>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	2a 95       	dec	r18
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <Write_Pin+0x1ba>
    164e:	80 95       	com	r24
    1650:	48 23       	and	r20, r24
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 01       	movw	r18, r24
    165a:	21 70       	andi	r18, 0x01	; 1
    165c:	30 70       	andi	r19, 0x00	; 0
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	b9 01       	movw	r22, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <Write_Pin+0x1e0>
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	8a 95       	dec	r24
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <Write_Pin+0x1dc>
    1670:	cb 01       	movw	r24, r22
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	02 c1       	rjmp	.+516    	; 0x187c <Write_Pin+0x3f0>
		break;
	case E:
		BASE_E = (BASE_E & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1678:	ae e2       	ldi	r26, 0x2E	; 46
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ee e2       	ldi	r30, 0x2E	; 46
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <Write_Pin+0x208>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	2a 95       	dec	r18
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <Write_Pin+0x204>
    1698:	80 95       	com	r24
    169a:	48 23       	and	r20, r24
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9c 01       	movw	r18, r24
    16a4:	21 70       	andi	r18, 0x01	; 1
    16a6:	30 70       	andi	r19, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	b9 01       	movw	r22, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <Write_Pin+0x22a>
    16b2:	66 0f       	add	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <Write_Pin+0x226>
    16ba:	cb 01       	movw	r24, r22
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	dd c0       	rjmp	.+442    	; 0x187c <Write_Pin+0x3f0>
		break;
	case F:
		BASE_F = (BASE_F & (~(1<<pin))) | ((Data & 0x01) <<pin);
    16c2:	a1 e3       	ldi	r26, 0x31	; 49
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e1 e3       	ldi	r30, 0x31	; 49
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <Write_Pin+0x252>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	2a 95       	dec	r18
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <Write_Pin+0x24e>
    16e2:	80 95       	com	r24
    16e4:	48 23       	and	r20, r24
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 01       	movw	r18, r24
    16ee:	21 70       	andi	r18, 0x01	; 1
    16f0:	30 70       	andi	r19, 0x00	; 0
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	b9 01       	movw	r22, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <Write_Pin+0x274>
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	8a 95       	dec	r24
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <Write_Pin+0x270>
    1704:	cb 01       	movw	r24, r22
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	b8 c0       	rjmp	.+368    	; 0x187c <Write_Pin+0x3f0>
		break;
	case G:
		BASE_G = (BASE_G & (~(1<<pin))) | ((Data & 0x01) <<pin);
    170c:	a4 e3       	ldi	r26, 0x34	; 52
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e4 e3       	ldi	r30, 0x34	; 52
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <Write_Pin+0x29c>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	2a 95       	dec	r18
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <Write_Pin+0x298>
    172c:	80 95       	com	r24
    172e:	48 23       	and	r20, r24
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 01       	movw	r18, r24
    1738:	21 70       	andi	r18, 0x01	; 1
    173a:	30 70       	andi	r19, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	b9 01       	movw	r22, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <Write_Pin+0x2be>
    1746:	66 0f       	add	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <Write_Pin+0x2ba>
    174e:	cb 01       	movw	r24, r22
    1750:	84 2b       	or	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	93 c0       	rjmp	.+294    	; 0x187c <Write_Pin+0x3f0>
		break;
	case H:
		BASE_H = (BASE_H & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1756:	a2 e0       	ldi	r26, 0x02	; 2
    1758:	b1 e0       	ldi	r27, 0x01	; 1
    175a:	e2 e0       	ldi	r30, 0x02	; 2
    175c:	f1 e0       	ldi	r31, 0x01	; 1
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <Write_Pin+0x2e6>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	2a 95       	dec	r18
    1774:	e2 f7       	brpl	.-8      	; 0x176e <Write_Pin+0x2e2>
    1776:	80 95       	com	r24
    1778:	48 23       	and	r20, r24
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 01       	movw	r18, r24
    1782:	21 70       	andi	r18, 0x01	; 1
    1784:	30 70       	andi	r19, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	b9 01       	movw	r22, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <Write_Pin+0x308>
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	8a 95       	dec	r24
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <Write_Pin+0x304>
    1798:	cb 01       	movw	r24, r22
    179a:	84 2b       	or	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	6e c0       	rjmp	.+220    	; 0x187c <Write_Pin+0x3f0>
		break;
	case J:
		BASE_J = (BASE_J & (~(1<<pin))) | ((Data & 0x01) <<pin);
    17a0:	a5 e0       	ldi	r26, 0x05	; 5
    17a2:	b1 e0       	ldi	r27, 0x01	; 1
    17a4:	e5 e0       	ldi	r30, 0x05	; 5
    17a6:	f1 e0       	ldi	r31, 0x01	; 1
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <Write_Pin+0x330>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	2a 95       	dec	r18
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <Write_Pin+0x32c>
    17c0:	80 95       	com	r24
    17c2:	48 23       	and	r20, r24
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9c 01       	movw	r18, r24
    17cc:	21 70       	andi	r18, 0x01	; 1
    17ce:	30 70       	andi	r19, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b9 01       	movw	r22, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <Write_Pin+0x352>
    17da:	66 0f       	add	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	8a 95       	dec	r24
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <Write_Pin+0x34e>
    17e2:	cb 01       	movw	r24, r22
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	49 c0       	rjmp	.+146    	; 0x187c <Write_Pin+0x3f0>
		break;
	case K:
		BASE_K = (BASE_K & (~(1<<pin))) | ((Data & 0x01) <<pin);
    17ea:	a8 e0       	ldi	r26, 0x08	; 8
    17ec:	b1 e0       	ldi	r27, 0x01	; 1
    17ee:	e8 e0       	ldi	r30, 0x08	; 8
    17f0:	f1 e0       	ldi	r31, 0x01	; 1
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <Write_Pin+0x37a>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	2a 95       	dec	r18
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <Write_Pin+0x376>
    180a:	80 95       	com	r24
    180c:	48 23       	and	r20, r24
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9c 01       	movw	r18, r24
    1816:	21 70       	andi	r18, 0x01	; 1
    1818:	30 70       	andi	r19, 0x00	; 0
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	b9 01       	movw	r22, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <Write_Pin+0x39c>
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	8a 95       	dec	r24
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <Write_Pin+0x398>
    182c:	cb 01       	movw	r24, r22
    182e:	84 2b       	or	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	24 c0       	rjmp	.+72     	; 0x187c <Write_Pin+0x3f0>
		break;
	case L:
		BASE_L = (BASE_L & (~(1<<pin))) | ((Data & 0x01) <<pin);
    1834:	ab e0       	ldi	r26, 0x0B	; 11
    1836:	b1 e0       	ldi	r27, 0x01	; 1
    1838:	eb e0       	ldi	r30, 0x0B	; 11
    183a:	f1 e0       	ldi	r31, 0x01	; 1
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <Write_Pin+0x3c4>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	2a 95       	dec	r18
    1852:	e2 f7       	brpl	.-8      	; 0x184c <Write_Pin+0x3c0>
    1854:	80 95       	com	r24
    1856:	48 23       	and	r20, r24
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9c 01       	movw	r18, r24
    1860:	21 70       	andi	r18, 0x01	; 1
    1862:	30 70       	andi	r19, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	b9 01       	movw	r22, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <Write_Pin+0x3e6>
    186e:	66 0f       	add	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <Write_Pin+0x3e2>
    1876:	cb 01       	movw	r24, r22
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
		break;
	}
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <pin_write>:

void pin_write(PIN_Config_t* Pin, uint8_t val) {
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <pin_write+0x6>
    1892:	0f 92       	push	r0
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	6b 83       	std	Y+3, r22	; 0x03
	switch(Pin -> port){
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	83 81       	ldd	r24, Z+3	; 0x03
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3d 83       	std	Y+5, r19	; 0x05
    18ac:	2c 83       	std	Y+4, r18	; 0x04
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <pin_write+0x2e>
    18b8:	3d c1       	rjmp	.+634    	; 0x1b34 <pin_write+0x2a8>
    18ba:	2c 81       	ldd	r18, Y+4	; 0x04
    18bc:	3d 81       	ldd	r19, Y+5	; 0x05
    18be:	26 30       	cpi	r18, 0x06	; 6
    18c0:	31 05       	cpc	r19, r1
    18c2:	1c f5       	brge	.+70     	; 0x190a <pin_write+0x7e>
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <pin_write+0x44>
    18ce:	a2 c0       	rjmp	.+324    	; 0x1a14 <pin_write+0x188>
    18d0:	2c 81       	ldd	r18, Y+4	; 0x04
    18d2:	3d 81       	ldd	r19, Y+5	; 0x05
    18d4:	23 30       	cpi	r18, 0x03	; 3
    18d6:	31 05       	cpc	r19, r1
    18d8:	5c f4       	brge	.+22     	; 0x18f0 <pin_write+0x64>
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	c9 f1       	breq	.+114    	; 0x1954 <pin_write+0xc8>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	21 30       	cpi	r18, 0x01	; 1
    18e8:	31 05       	cpc	r19, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <pin_write+0x62>
    18ec:	63 c0       	rjmp	.+198    	; 0x19b4 <pin_write+0x128>
    18ee:	41 c2       	rjmp	.+1154   	; 0x1d72 <pin_write+0x4e6>
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <pin_write+0x70>
    18fa:	bc c0       	rjmp	.+376    	; 0x1a74 <pin_write+0x1e8>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	24 30       	cpi	r18, 0x04	; 4
    1902:	31 05       	cpc	r19, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <pin_write+0x7c>
    1906:	e6 c0       	rjmp	.+460    	; 0x1ad4 <pin_write+0x248>
    1908:	34 c2       	rjmp	.+1128   	; 0x1d72 <pin_write+0x4e6>
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	91 05       	cpc	r25, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <pin_write+0x8a>
    1914:	9f c1       	rjmp	.+830    	; 0x1c54 <pin_write+0x3c8>
    1916:	2c 81       	ldd	r18, Y+4	; 0x04
    1918:	3d 81       	ldd	r19, Y+5	; 0x05
    191a:	29 30       	cpi	r18, 0x09	; 9
    191c:	31 05       	cpc	r19, r1
    191e:	6c f4       	brge	.+26     	; 0x193a <pin_write+0xae>
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	86 30       	cpi	r24, 0x06	; 6
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <pin_write+0xa0>
    192a:	34 c1       	rjmp	.+616    	; 0x1b94 <pin_write+0x308>
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	27 30       	cpi	r18, 0x07	; 7
    1932:	31 05       	cpc	r19, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <pin_write+0xac>
    1936:	5e c1       	rjmp	.+700    	; 0x1bf4 <pin_write+0x368>
    1938:	1c c2       	rjmp	.+1080   	; 0x1d72 <pin_write+0x4e6>
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	9d 81       	ldd	r25, Y+5	; 0x05
    193e:	89 30       	cpi	r24, 0x09	; 9
    1940:	91 05       	cpc	r25, r1
    1942:	09 f4       	brne	.+2      	; 0x1946 <pin_write+0xba>
    1944:	b7 c1       	rjmp	.+878    	; 0x1cb4 <pin_write+0x428>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	2a 30       	cpi	r18, 0x0A	; 10
    194c:	31 05       	cpc	r19, r1
    194e:	09 f4       	brne	.+2      	; 0x1952 <pin_write+0xc6>
    1950:	e1 c1       	rjmp	.+962    	; 0x1d14 <pin_write+0x488>
    1952:	0f c2       	rjmp	.+1054   	; 0x1d72 <pin_write+0x4e6>
	case A:
		if(val){
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	88 23       	and	r24, r24
    1958:	b1 f0       	breq	.+44     	; 0x1986 <pin_write+0xfa>
			SET_BIT(BASE_A, Pin -> pin_num);
    195a:	a2 e2       	ldi	r26, 0x22	; 34
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e2 e2       	ldi	r30, 0x22	; 34
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	81 81       	ldd	r24, Z+1	; 0x01
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	02 2e       	mov	r0, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <pin_write+0xf0>
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	0a 94       	dec	r0
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <pin_write+0xec>
    1980:	84 2b       	or	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	f6 c1       	rjmp	.+1004   	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_A, Pin -> pin_num);
    1986:	a2 e2       	ldi	r26, 0x22	; 34
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e2 e2       	ldi	r30, 0x22	; 34
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	e9 81       	ldd	r30, Y+1	; 0x01
    1994:	fa 81       	ldd	r31, Y+2	; 0x02
    1996:	81 81       	ldd	r24, Z+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <pin_write+0x11c>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <pin_write+0x118>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	df c1       	rjmp	.+958    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case B:
		if(val){
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	88 23       	and	r24, r24
    19b8:	b1 f0       	breq	.+44     	; 0x19e6 <pin_write+0x15a>
			SET_BIT(BASE_B, Pin -> pin_num);
    19ba:	a5 e2       	ldi	r26, 0x25	; 37
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e2       	ldi	r30, 0x25	; 37
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	e9 81       	ldd	r30, Y+1	; 0x01
    19c8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ca:	81 81       	ldd	r24, Z+1	; 0x01
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <pin_write+0x150>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <pin_write+0x14c>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	c6 c1       	rjmp	.+908    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_B, Pin -> pin_num);
    19e6:	a5 e2       	ldi	r26, 0x25	; 37
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e5 e2       	ldi	r30, 0x25	; 37
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	e9 81       	ldd	r30, Y+1	; 0x01
    19f4:	fa 81       	ldd	r31, Y+2	; 0x02
    19f6:	81 81       	ldd	r24, Z+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <pin_write+0x17c>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <pin_write+0x178>
    1a0c:	80 95       	com	r24
    1a0e:	84 23       	and	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	af c1       	rjmp	.+862    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case C:
		if(val){
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	88 23       	and	r24, r24
    1a18:	b1 f0       	breq	.+44     	; 0x1a46 <pin_write+0x1ba>
			SET_BIT(BASE_C, Pin -> pin_num);
    1a1a:	a8 e2       	ldi	r26, 0x28	; 40
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e8 e2       	ldi	r30, 0x28	; 40
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	e9 81       	ldd	r30, Y+1	; 0x01
    1a28:	fa 81       	ldd	r31, Y+2	; 0x02
    1a2a:	81 81       	ldd	r24, Z+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <pin_write+0x1b0>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <pin_write+0x1ac>
    1a40:	84 2b       	or	r24, r20
    1a42:	8c 93       	st	X, r24
    1a44:	96 c1       	rjmp	.+812    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_C, Pin -> pin_num);
    1a46:	a8 e2       	ldi	r26, 0x28	; 40
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e2       	ldi	r30, 0x28	; 40
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	e9 81       	ldd	r30, Y+1	; 0x01
    1a54:	fa 81       	ldd	r31, Y+2	; 0x02
    1a56:	81 81       	ldd	r24, Z+1	; 0x01
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 2e       	mov	r0, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <pin_write+0x1dc>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	0a 94       	dec	r0
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <pin_write+0x1d8>
    1a6c:	80 95       	com	r24
    1a6e:	84 23       	and	r24, r20
    1a70:	8c 93       	st	X, r24
    1a72:	7f c1       	rjmp	.+766    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case D:
		if(val){
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	88 23       	and	r24, r24
    1a78:	b1 f0       	breq	.+44     	; 0x1aa6 <pin_write+0x21a>
			SET_BIT(BASE_D, Pin -> pin_num);
    1a7a:	ab e2       	ldi	r26, 0x2B	; 43
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	eb e2       	ldi	r30, 0x2B	; 43
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	81 81       	ldd	r24, Z+1	; 0x01
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <pin_write+0x210>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <pin_write+0x20c>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	66 c1       	rjmp	.+716    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_D, Pin -> pin_num);
    1aa6:	ab e2       	ldi	r26, 0x2B	; 43
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	eb e2       	ldi	r30, 0x2B	; 43
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <pin_write+0x23c>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <pin_write+0x238>
    1acc:	80 95       	com	r24
    1ace:	84 23       	and	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	4f c1       	rjmp	.+670    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case E:
		if(val){
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	88 23       	and	r24, r24
    1ad8:	b1 f0       	breq	.+44     	; 0x1b06 <pin_write+0x27a>
			SET_BIT(BASE_E, Pin -> pin_num);
    1ada:	ae e2       	ldi	r26, 0x2E	; 46
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ee e2       	ldi	r30, 0x2E	; 46
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 2e       	mov	r0, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <pin_write+0x270>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	0a 94       	dec	r0
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <pin_write+0x26c>
    1b00:	84 2b       	or	r24, r20
    1b02:	8c 93       	st	X, r24
    1b04:	36 c1       	rjmp	.+620    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_E, Pin -> pin_num);
    1b06:	ae e2       	ldi	r26, 0x2E	; 46
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ee e2       	ldi	r30, 0x2E	; 46
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	e9 81       	ldd	r30, Y+1	; 0x01
    1b14:	fa 81       	ldd	r31, Y+2	; 0x02
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 2e       	mov	r0, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <pin_write+0x29c>
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	0a 94       	dec	r0
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <pin_write+0x298>
    1b2c:	80 95       	com	r24
    1b2e:	84 23       	and	r24, r20
    1b30:	8c 93       	st	X, r24
    1b32:	1f c1       	rjmp	.+574    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case F:
		if(val){
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	88 23       	and	r24, r24
    1b38:	b1 f0       	breq	.+44     	; 0x1b66 <pin_write+0x2da>
			SET_BIT(BASE_F, Pin -> pin_num);
    1b3a:	a1 e3       	ldi	r26, 0x31	; 49
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e1 e3       	ldi	r30, 0x31	; 49
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	e9 81       	ldd	r30, Y+1	; 0x01
    1b48:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4a:	81 81       	ldd	r24, Z+1	; 0x01
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <pin_write+0x2d0>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <pin_write+0x2cc>
    1b60:	84 2b       	or	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	06 c1       	rjmp	.+524    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_F, Pin -> pin_num);
    1b66:	a1 e3       	ldi	r26, 0x31	; 49
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e1 e3       	ldi	r30, 0x31	; 49
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	e9 81       	ldd	r30, Y+1	; 0x01
    1b74:	fa 81       	ldd	r31, Y+2	; 0x02
    1b76:	81 81       	ldd	r24, Z+1	; 0x01
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <pin_write+0x2fc>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <pin_write+0x2f8>
    1b8c:	80 95       	com	r24
    1b8e:	84 23       	and	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	ef c0       	rjmp	.+478    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case G:
		if(val){
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	88 23       	and	r24, r24
    1b98:	b1 f0       	breq	.+44     	; 0x1bc6 <pin_write+0x33a>
			SET_BIT(BASE_G, Pin -> pin_num);
    1b9a:	a4 e3       	ldi	r26, 0x34	; 52
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e4 e3       	ldi	r30, 0x34	; 52
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	81 81       	ldd	r24, Z+1	; 0x01
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <pin_write+0x330>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <pin_write+0x32c>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	d6 c0       	rjmp	.+428    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_G, Pin -> pin_num);
    1bc6:	a4 e3       	ldi	r26, 0x34	; 52
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e4 e3       	ldi	r30, 0x34	; 52
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd6:	81 81       	ldd	r24, Z+1	; 0x01
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <pin_write+0x35c>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <pin_write+0x358>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	bf c0       	rjmp	.+382    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case H:
		if(val){
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	88 23       	and	r24, r24
    1bf8:	b1 f0       	breq	.+44     	; 0x1c26 <pin_write+0x39a>
			SET_BIT(BASE_H, Pin -> pin_num);
    1bfa:	a2 e0       	ldi	r26, 0x02	; 2
    1bfc:	b1 e0       	ldi	r27, 0x01	; 1
    1bfe:	e2 e0       	ldi	r30, 0x02	; 2
    1c00:	f1 e0       	ldi	r31, 0x01	; 1
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	e9 81       	ldd	r30, Y+1	; 0x01
    1c08:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0a:	81 81       	ldd	r24, Z+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <pin_write+0x390>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <pin_write+0x38c>
    1c20:	84 2b       	or	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	a6 c0       	rjmp	.+332    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_H, Pin -> pin_num);
    1c26:	a2 e0       	ldi	r26, 0x02	; 2
    1c28:	b1 e0       	ldi	r27, 0x01	; 1
    1c2a:	e2 e0       	ldi	r30, 0x02	; 2
    1c2c:	f1 e0       	ldi	r31, 0x01	; 1
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	e9 81       	ldd	r30, Y+1	; 0x01
    1c34:	fa 81       	ldd	r31, Y+2	; 0x02
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <pin_write+0x3bc>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <pin_write+0x3b8>
    1c4c:	80 95       	com	r24
    1c4e:	84 23       	and	r24, r20
    1c50:	8c 93       	st	X, r24
    1c52:	8f c0       	rjmp	.+286    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case J:
		if(val){
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	88 23       	and	r24, r24
    1c58:	b1 f0       	breq	.+44     	; 0x1c86 <pin_write+0x3fa>
			SET_BIT(BASE_J, Pin -> pin_num);
    1c5a:	a5 e0       	ldi	r26, 0x05	; 5
    1c5c:	b1 e0       	ldi	r27, 0x01	; 1
    1c5e:	e5 e0       	ldi	r30, 0x05	; 5
    1c60:	f1 e0       	ldi	r31, 0x01	; 1
    1c62:	80 81       	ld	r24, Z
    1c64:	48 2f       	mov	r20, r24
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	81 81       	ldd	r24, Z+1	; 0x01
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <pin_write+0x3f0>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <pin_write+0x3ec>
    1c80:	84 2b       	or	r24, r20
    1c82:	8c 93       	st	X, r24
    1c84:	76 c0       	rjmp	.+236    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_J, Pin -> pin_num);
    1c86:	a5 e0       	ldi	r26, 0x05	; 5
    1c88:	b1 e0       	ldi	r27, 0x01	; 1
    1c8a:	e5 e0       	ldi	r30, 0x05	; 5
    1c8c:	f1 e0       	ldi	r31, 0x01	; 1
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	81 81       	ldd	r24, Z+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <pin_write+0x41c>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <pin_write+0x418>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	8c 93       	st	X, r24
    1cb2:	5f c0       	rjmp	.+190    	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case K:
		if(val){
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	88 23       	and	r24, r24
    1cb8:	b1 f0       	breq	.+44     	; 0x1ce6 <pin_write+0x45a>
			SET_BIT(BASE_K, Pin -> pin_num);
    1cba:	a8 e0       	ldi	r26, 0x08	; 8
    1cbc:	b1 e0       	ldi	r27, 0x01	; 1
    1cbe:	e8 e0       	ldi	r30, 0x08	; 8
    1cc0:	f1 e0       	ldi	r31, 0x01	; 1
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cca:	81 81       	ldd	r24, Z+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <pin_write+0x450>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <pin_write+0x44c>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	46 c0       	rjmp	.+140    	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_K, Pin -> pin_num);
    1ce6:	a8 e0       	ldi	r26, 0x08	; 8
    1ce8:	b1 e0       	ldi	r27, 0x01	; 1
    1cea:	e8 e0       	ldi	r30, 0x08	; 8
    1cec:	f1 e0       	ldi	r31, 0x01	; 1
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf6:	81 81       	ldd	r24, Z+1	; 0x01
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <pin_write+0x47c>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <pin_write+0x478>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	2f c0       	rjmp	.+94     	; 0x1d72 <pin_write+0x4e6>
		}
		break;
	case L:
		if(val){
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	88 23       	and	r24, r24
    1d18:	b1 f0       	breq	.+44     	; 0x1d46 <pin_write+0x4ba>
			SET_BIT(BASE_L, Pin -> pin_num);
    1d1a:	ab e0       	ldi	r26, 0x0B	; 11
    1d1c:	b1 e0       	ldi	r27, 0x01	; 1
    1d1e:	eb e0       	ldi	r30, 0x0B	; 11
    1d20:	f1 e0       	ldi	r31, 0x01	; 1
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	e9 81       	ldd	r30, Y+1	; 0x01
    1d28:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2a:	81 81       	ldd	r24, Z+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <pin_write+0x4b0>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <pin_write+0x4ac>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	16 c0       	rjmp	.+44     	; 0x1d72 <pin_write+0x4e6>
		}else{
			CLEAR_BIT(BASE_L, Pin -> pin_num);
    1d46:	ab e0       	ldi	r26, 0x0B	; 11
    1d48:	b1 e0       	ldi	r27, 0x01	; 1
    1d4a:	eb e0       	ldi	r30, 0x0B	; 11
    1d4c:	f1 e0       	ldi	r31, 0x01	; 1
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	81 81       	ldd	r24, Z+1	; 0x01
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <pin_write+0x4dc>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <pin_write+0x4d8>
    1d6c:	80 95       	com	r24
    1d6e:	84 23       	and	r24, r20
    1d70:	8c 93       	st	X, r24
		}
		break;
	}

}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <port_read>:
uint8_t port_read(PORT_Config_t * Port) {
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <port_read+0x6>
    1d88:	0f 92       	push	r0
    1d8a:	0f 92       	push	r0
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
	switch(Port -> port){
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3d 83       	std	Y+5, r19	; 0x05
    1da0:	2c 83       	std	Y+4, r18	; 0x04
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	9d 81       	ldd	r25, Y+5	; 0x05
    1da6:	85 30       	cpi	r24, 0x05	; 5
    1da8:	91 05       	cpc	r25, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <port_read+0x2c>
    1dac:	5f c0       	rjmp	.+190    	; 0x1e6c <port_read+0xea>
    1dae:	2c 81       	ldd	r18, Y+4	; 0x04
    1db0:	3d 81       	ldd	r19, Y+5	; 0x05
    1db2:	26 30       	cpi	r18, 0x06	; 6
    1db4:	31 05       	cpc	r19, r1
    1db6:	04 f5       	brge	.+64     	; 0x1df8 <port_read+0x76>
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbc:	82 30       	cpi	r24, 0x02	; 2
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <port_read+0x42>
    1dc2:	45 c0       	rjmp	.+138    	; 0x1e4e <port_read+0xcc>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	23 30       	cpi	r18, 0x03	; 3
    1dca:	31 05       	cpc	r19, r1
    1dcc:	54 f4       	brge	.+20     	; 0x1de2 <port_read+0x60>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	91 f1       	breq	.+100    	; 0x1e3a <port_read+0xb8>
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	21 30       	cpi	r18, 0x01	; 1
    1ddc:	31 05       	cpc	r19, r1
    1dde:	91 f1       	breq	.+100    	; 0x1e44 <port_read+0xc2>
    1de0:	63 c0       	rjmp	.+198    	; 0x1ea8 <port_read+0x126>
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	b1 f1       	breq	.+108    	; 0x1e58 <port_read+0xd6>
    1dec:	2c 81       	ldd	r18, Y+4	; 0x04
    1dee:	3d 81       	ldd	r19, Y+5	; 0x05
    1df0:	24 30       	cpi	r18, 0x04	; 4
    1df2:	31 05       	cpc	r19, r1
    1df4:	b1 f1       	breq	.+108    	; 0x1e62 <port_read+0xe0>
    1df6:	58 c0       	rjmp	.+176    	; 0x1ea8 <port_read+0x126>
    1df8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfc:	88 30       	cpi	r24, 0x08	; 8
    1dfe:	91 05       	cpc	r25, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <port_read+0x82>
    1e02:	43 c0       	rjmp	.+134    	; 0x1e8a <port_read+0x108>
    1e04:	2c 81       	ldd	r18, Y+4	; 0x04
    1e06:	3d 81       	ldd	r19, Y+5	; 0x05
    1e08:	29 30       	cpi	r18, 0x09	; 9
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	5c f4       	brge	.+22     	; 0x1e24 <port_read+0xa2>
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	86 30       	cpi	r24, 0x06	; 6
    1e14:	91 05       	cpc	r25, r1
    1e16:	79 f1       	breq	.+94     	; 0x1e76 <port_read+0xf4>
    1e18:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1c:	27 30       	cpi	r18, 0x07	; 7
    1e1e:	31 05       	cpc	r19, r1
    1e20:	79 f1       	breq	.+94     	; 0x1e80 <port_read+0xfe>
    1e22:	42 c0       	rjmp	.+132    	; 0x1ea8 <port_read+0x126>
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	89 30       	cpi	r24, 0x09	; 9
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	99 f1       	breq	.+102    	; 0x1e94 <port_read+0x112>
    1e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e30:	3d 81       	ldd	r19, Y+5	; 0x05
    1e32:	2a 30       	cpi	r18, 0x0A	; 10
    1e34:	31 05       	cpc	r19, r1
    1e36:	99 f1       	breq	.+102    	; 0x1e9e <port_read+0x11c>
    1e38:	37 c0       	rjmp	.+110    	; 0x1ea8 <port_read+0x126>
	case A:
		return BASE_A;
    1e3a:	e2 e2       	ldi	r30, 0x22	; 34
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	30 81       	ld	r19, Z
    1e40:	3b 83       	std	Y+3, r19	; 0x03
    1e42:	34 c0       	rjmp	.+104    	; 0x1eac <port_read+0x12a>
	case B:
		return BASE_B;
    1e44:	e5 e2       	ldi	r30, 0x25	; 37
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	2f c0       	rjmp	.+94     	; 0x1eac <port_read+0x12a>
	case C:
		return BASE_C;
    1e4e:	e8 e2       	ldi	r30, 0x28	; 40
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	90 81       	ld	r25, Z
    1e54:	9b 83       	std	Y+3, r25	; 0x03
    1e56:	2a c0       	rjmp	.+84     	; 0x1eac <port_read+0x12a>
	case D:
		return BASE_D;
    1e58:	eb e2       	ldi	r30, 0x2B	; 43
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	20 81       	ld	r18, Z
    1e5e:	2b 83       	std	Y+3, r18	; 0x03
    1e60:	25 c0       	rjmp	.+74     	; 0x1eac <port_read+0x12a>
	case E:
		return BASE_E;
    1e62:	ee e2       	ldi	r30, 0x2E	; 46
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	30 81       	ld	r19, Z
    1e68:	3b 83       	std	Y+3, r19	; 0x03
    1e6a:	20 c0       	rjmp	.+64     	; 0x1eac <port_read+0x12a>
	case F:
		return BASE_F;
    1e6c:	e1 e3       	ldi	r30, 0x31	; 49
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	1b c0       	rjmp	.+54     	; 0x1eac <port_read+0x12a>
	case G:
		return BASE_G;
    1e76:	e4 e3       	ldi	r30, 0x34	; 52
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	90 81       	ld	r25, Z
    1e7c:	9b 83       	std	Y+3, r25	; 0x03
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <port_read+0x12a>
	case H:
		return BASE_H;
    1e80:	e2 e0       	ldi	r30, 0x02	; 2
    1e82:	f1 e0       	ldi	r31, 0x01	; 1
    1e84:	20 81       	ld	r18, Z
    1e86:	2b 83       	std	Y+3, r18	; 0x03
    1e88:	11 c0       	rjmp	.+34     	; 0x1eac <port_read+0x12a>
	case J:
		return BASE_J;
    1e8a:	e5 e0       	ldi	r30, 0x05	; 5
    1e8c:	f1 e0       	ldi	r31, 0x01	; 1
    1e8e:	30 81       	ld	r19, Z
    1e90:	3b 83       	std	Y+3, r19	; 0x03
    1e92:	0c c0       	rjmp	.+24     	; 0x1eac <port_read+0x12a>
	case K:
		return BASE_K;
    1e94:	e8 e0       	ldi	r30, 0x08	; 8
    1e96:	f1 e0       	ldi	r31, 0x01	; 1
    1e98:	80 81       	ld	r24, Z
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <port_read+0x12a>
	case L:
		return BASE_L;
    1e9e:	eb e0       	ldi	r30, 0x0B	; 11
    1ea0:	f1 e0       	ldi	r31, 0x01	; 1
    1ea2:	90 81       	ld	r25, Z
    1ea4:	9b 83       	std	Y+3, r25	; 0x03
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <port_read+0x12a>
	}
	return 1;
    1ea8:	21 e0       	ldi	r18, 0x01	; 1
    1eaa:	2b 83       	std	Y+3, r18	; 0x03
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <port_write>:

void port_write(PORT_Config_t * Port, uint8_t val) {
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <port_write+0x6>
    1ec4:	0f 92       	push	r0
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	6b 83       	std	Y+3, r22	; 0x03
	switch(Port -> port){
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	3d 83       	std	Y+5, r19	; 0x05
    1ede:	2c 83       	std	Y+4, r18	; 0x04
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	85 30       	cpi	r24, 0x05	; 5
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <port_write+0x2e>
    1eea:	5f c0       	rjmp	.+190    	; 0x1faa <port_write+0xec>
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef0:	26 30       	cpi	r18, 0x06	; 6
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	04 f5       	brge	.+64     	; 0x1f36 <port_write+0x78>
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	82 30       	cpi	r24, 0x02	; 2
    1efc:	91 05       	cpc	r25, r1
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <port_write+0x44>
    1f00:	45 c0       	rjmp	.+138    	; 0x1f8c <port_write+0xce>
    1f02:	2c 81       	ldd	r18, Y+4	; 0x04
    1f04:	3d 81       	ldd	r19, Y+5	; 0x05
    1f06:	23 30       	cpi	r18, 0x03	; 3
    1f08:	31 05       	cpc	r19, r1
    1f0a:	54 f4       	brge	.+20     	; 0x1f20 <port_write+0x62>
    1f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	91 f1       	breq	.+100    	; 0x1f78 <port_write+0xba>
    1f14:	2c 81       	ldd	r18, Y+4	; 0x04
    1f16:	3d 81       	ldd	r19, Y+5	; 0x05
    1f18:	21 30       	cpi	r18, 0x01	; 1
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	91 f1       	breq	.+100    	; 0x1f82 <port_write+0xc4>
    1f1e:	62 c0       	rjmp	.+196    	; 0x1fe4 <port_write+0x126>
    1f20:	8c 81       	ldd	r24, Y+4	; 0x04
    1f22:	9d 81       	ldd	r25, Y+5	; 0x05
    1f24:	83 30       	cpi	r24, 0x03	; 3
    1f26:	91 05       	cpc	r25, r1
    1f28:	b1 f1       	breq	.+108    	; 0x1f96 <port_write+0xd8>
    1f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2e:	24 30       	cpi	r18, 0x04	; 4
    1f30:	31 05       	cpc	r19, r1
    1f32:	b1 f1       	breq	.+108    	; 0x1fa0 <port_write+0xe2>
    1f34:	57 c0       	rjmp	.+174    	; 0x1fe4 <port_write+0x126>
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3a:	88 30       	cpi	r24, 0x08	; 8
    1f3c:	91 05       	cpc	r25, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <port_write+0x84>
    1f40:	43 c0       	rjmp	.+134    	; 0x1fc8 <port_write+0x10a>
    1f42:	2c 81       	ldd	r18, Y+4	; 0x04
    1f44:	3d 81       	ldd	r19, Y+5	; 0x05
    1f46:	29 30       	cpi	r18, 0x09	; 9
    1f48:	31 05       	cpc	r19, r1
    1f4a:	5c f4       	brge	.+22     	; 0x1f62 <port_write+0xa4>
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	86 30       	cpi	r24, 0x06	; 6
    1f52:	91 05       	cpc	r25, r1
    1f54:	79 f1       	breq	.+94     	; 0x1fb4 <port_write+0xf6>
    1f56:	2c 81       	ldd	r18, Y+4	; 0x04
    1f58:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5a:	27 30       	cpi	r18, 0x07	; 7
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	79 f1       	breq	.+94     	; 0x1fbe <port_write+0x100>
    1f60:	41 c0       	rjmp	.+130    	; 0x1fe4 <port_write+0x126>
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	9d 81       	ldd	r25, Y+5	; 0x05
    1f66:	89 30       	cpi	r24, 0x09	; 9
    1f68:	91 05       	cpc	r25, r1
    1f6a:	99 f1       	breq	.+102    	; 0x1fd2 <port_write+0x114>
    1f6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f70:	2a 30       	cpi	r18, 0x0A	; 10
    1f72:	31 05       	cpc	r19, r1
    1f74:	99 f1       	breq	.+102    	; 0x1fdc <port_write+0x11e>
    1f76:	36 c0       	rjmp	.+108    	; 0x1fe4 <port_write+0x126>
		case A:
			BASE_A = val;
    1f78:	e2 e2       	ldi	r30, 0x22	; 34
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	80 83       	st	Z, r24
    1f80:	31 c0       	rjmp	.+98     	; 0x1fe4 <port_write+0x126>
			break;
		case B:
			BASE_B = val;
    1f82:	e5 e2       	ldi	r30, 0x25	; 37
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	80 83       	st	Z, r24
    1f8a:	2c c0       	rjmp	.+88     	; 0x1fe4 <port_write+0x126>
			break;
		case C:
			BASE_C = val;
    1f8c:	e8 e2       	ldi	r30, 0x28	; 40
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	80 83       	st	Z, r24
    1f94:	27 c0       	rjmp	.+78     	; 0x1fe4 <port_write+0x126>
			break;
		case D:
			BASE_D = val;
    1f96:	eb e2       	ldi	r30, 0x2B	; 43
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	80 83       	st	Z, r24
    1f9e:	22 c0       	rjmp	.+68     	; 0x1fe4 <port_write+0x126>
			break;
		case E:
			BASE_E = val;
    1fa0:	ee e2       	ldi	r30, 0x2E	; 46
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	80 83       	st	Z, r24
    1fa8:	1d c0       	rjmp	.+58     	; 0x1fe4 <port_write+0x126>
			break;
		case F:
			BASE_F = val;
    1faa:	e1 e3       	ldi	r30, 0x31	; 49
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	80 83       	st	Z, r24
    1fb2:	18 c0       	rjmp	.+48     	; 0x1fe4 <port_write+0x126>
			break;
		case G:
			BASE_G = val;
    1fb4:	e4 e3       	ldi	r30, 0x34	; 52
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fba:	80 83       	st	Z, r24
    1fbc:	13 c0       	rjmp	.+38     	; 0x1fe4 <port_write+0x126>
			break;
		case H:
			BASE_H = val;
    1fbe:	e2 e0       	ldi	r30, 0x02	; 2
    1fc0:	f1 e0       	ldi	r31, 0x01	; 1
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	80 83       	st	Z, r24
    1fc6:	0e c0       	rjmp	.+28     	; 0x1fe4 <port_write+0x126>
			break;
		case J:
			BASE_J = val;
    1fc8:	e5 e0       	ldi	r30, 0x05	; 5
    1fca:	f1 e0       	ldi	r31, 0x01	; 1
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	80 83       	st	Z, r24
    1fd0:	09 c0       	rjmp	.+18     	; 0x1fe4 <port_write+0x126>
			break;
		case K:
			BASE_K = val;
    1fd2:	e8 e0       	ldi	r30, 0x08	; 8
    1fd4:	f1 e0       	ldi	r31, 0x01	; 1
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	80 83       	st	Z, r24
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <port_write+0x126>
			break;
		case L:
			BASE_L = val;
    1fdc:	eb e0       	ldi	r30, 0x0B	; 11
    1fde:	f1 e0       	ldi	r31, 0x01	; 1
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	80 83       	st	Z, r24
			break;
		}
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <__vector_29>:



void __vector_29 (void) __attribute__ ((signal,used));
void __vector_29(void)/*ADC ISR*/
{
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	00 90 5b 00 	lds	r0, 0x005B
    2000:	0f 92       	push	r0
    2002:	11 24       	eor	r1, r1
    2004:	8f 93       	push	r24
    2006:	9f 93       	push	r25
    2008:	ef 93       	push	r30
    200a:	ff 93       	push	r31
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	g_adcResult = ADC;
    2014:	e8 e7       	ldi	r30, 0x78	; 120
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	90 93 27 03 	sts	0x0327, r25
    2020:	80 93 26 03 	sts	0x0326, r24


}/*end of __vector_29()*/
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	9f 91       	pop	r25
    202e:	8f 91       	pop	r24
    2030:	0f 90       	pop	r0
    2032:	00 92 5b 00 	sts	0x005B, r0
    2036:	0f 90       	pop	r0
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	0f 90       	pop	r0
    203c:	1f 90       	pop	r1
    203e:	18 95       	reti

00002040 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void ADC_init(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    2048:	ec e7       	ldi	r30, 0x7C	; 124
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	10 82       	st	Z, r1
	CLEAR_BIT(ADCSRB, MUX5);
    204e:	ab e7       	ldi	r26, 0x7B	; 123
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	eb e7       	ldi	r30, 0x7B	; 123
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	87 7f       	andi	r24, 0xF7	; 247
    205a:	8c 93       	st	X, r24
	DDRF =0;
    205c:	e0 e3       	ldi	r30, 0x30	; 48
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 1 Enable ADC Interrupt ----  | (1<<ADIE)
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN)  | (1<<ADPS1) | (1<<ADPS0);
    2062:	ea e7       	ldi	r30, 0x7A	; 122
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	83 e8       	ldi	r24, 0x83	; 131
    2068:	80 83       	st	Z, r24
	DIDR0 = 1<<ADC0D | 1<<ADC1D | 1<<ADC2D;
    206a:	ee e7       	ldi	r30, 0x7E	; 126
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	87 e0       	ldi	r24, 0x07	; 7
    2070:	80 83       	st	Z, r24
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <ADC_readChannel>:

void ADC_readChannel(uint8_t channel_num)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	0f 92       	push	r0
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; 			/* channel number must be from 0 --> 7 */
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	87 70       	andi	r24, 0x07	; 7
    2088:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; 					/* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    208a:	ac e7       	ldi	r26, 0x7C	; 124
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	ec e7       	ldi	r30, 0x7C	; 124
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	80 7e       	andi	r24, 0xE0	; 224
    2096:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; 	/* choose the correct channel by setting the channel number in MUX4:0 bits */
    2098:	ac e7       	ldi	r26, 0x7C	; 124
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	ec e7       	ldi	r30, 0x7C	; 124
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	90 81       	ld	r25, Z
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	89 2b       	or	r24, r25
    20a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); 			/* start conversion write '1' to ADSC */
    20a8:	aa e7       	ldi	r26, 0x7A	; 122
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ea e7       	ldi	r30, 0x7A	; 122
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 64       	ori	r24, 0x40	; 64
    20b4:	8c 93       	st	X, r24
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
    20b6:	ea e7       	ldi	r30, 0x7A	; 122
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	80 71       	andi	r24, 0x10	; 16
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	b9 f3       	breq	.-18     	; 0x20b6 <ADC_readChannel+0x3e>
	g_adcResult = ADC;
    20c8:	e8 e7       	ldi	r30, 0x78	; 120
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	90 93 27 03 	sts	0x0327, r25
    20d4:	80 93 26 03 	sts	0x0326, r24

}
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <sensorRead>:
 */

#include "voice.h"


uint32_t sensorRead(uint8_t v_sensor){
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	89 83       	std	Y+1, r24	; 0x01
	ADC_readChannel(v_sensor);
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 3c 10 	call	0x2078	; 0x2078 <ADC_readChannel>
	//_delay_ms(30);
	return g_adcResult;
    20f6:	80 91 26 03 	lds	r24, 0x0326
    20fa:	90 91 27 03 	lds	r25, 0x0327
    20fe:	cc 01       	movw	r24, r24
    2100:	a0 e0       	ldi	r26, 0x00	; 0
    2102:	b0 e0       	ldi	r27, 0x00	; 0
}
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <compare>:

uint8_t compare(){
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	0f 92       	push	r0
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62

}
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <Servo_Init>:


uint8_t duty_cycle_S1 = 6;
uint8_t duty_cycle_S2 = 6;

void Servo_Init(){
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	2c 97       	sbiw	r28, 0x0c	; 12
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
	//three pins initialization
	PIN_Config_t pc7 = {OUTPUT, 7, 0, C};
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	87 e0       	ldi	r24, 0x07	; 7
    213c:	8a 83       	std	Y+2, r24	; 0x02
    213e:	1b 82       	std	Y+3, r1	; 0x03
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	8c 83       	std	Y+4, r24	; 0x04
	PIN_Config_t pg5 = {OUTPUT, 5, 0, G};
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	85 e0       	ldi	r24, 0x05	; 5
    214a:	8e 83       	std	Y+6, r24	; 0x06
    214c:	1f 82       	std	Y+7, r1	; 0x07
    214e:	86 e0       	ldi	r24, 0x06	; 6
    2150:	88 87       	std	Y+8, r24	; 0x08
	PIN_Config_t pb4 = {OUTPUT, 4, 0, B};
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	89 87       	std	Y+9, r24	; 0x09
    2156:	84 e0       	ldi	r24, 0x04	; 4
    2158:	8a 87       	std	Y+10, r24	; 0x0a
    215a:	1b 86       	std	Y+11, r1	; 0x0b
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	8c 87       	std	Y+12, r24	; 0x0c
	pin_init(&pc7);
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	pin_init(&pg5);
    2168:	ce 01       	movw	r24, r28
    216a:	05 96       	adiw	r24, 0x05	; 5
    216c:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	pin_init(&pb4);
    2170:	ce 01       	movw	r24, r28
    2172:	09 96       	adiw	r24, 0x09	; 9
    2174:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>

	TIMER0_voidInitializeTIMER0();
    2178:	0e 94 53 05 	call	0xaa6	; 0xaa6 <TIMER0_voidInitializeTIMER0>
	TIMER2_voidInitializeTimer2();
    217c:	0e 94 ce 04 	call	0x99c	; 0x99c <TIMER2_voidInitializeTimer2>
	TIMER0_voidFastPWM(duty_cycle_S1);
    2180:	80 91 0c 03 	lds	r24, 0x030C
    2184:	0e 94 aa 05 	call	0xb54	; 0xb54 <TIMER0_voidFastPWM>
	TIMER2_voidFastPWM(duty_cycle_S2);
    2188:	80 91 0d 03 	lds	r24, 0x030D
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 25 05 	call	0xa4a	; 0xa4a <TIMER2_voidFastPWM>

}
    2194:	2c 96       	adiw	r28, 0x0c	; 12
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <Increase_angle>:

void Increase_angle(servo_num ser_num)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <Increase_angle+0x6>
    21ac:	0f 92       	push	r0
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	89 83       	std	Y+1, r24	; 0x01
	switch(ser_num){
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	3d 83       	std	Y+5, r19	; 0x05
    21be:	2c 83       	std	Y+4, r18	; 0x04
    21c0:	8c 81       	ldd	r24, Y+4	; 0x04
    21c2:	9d 81       	ldd	r25, Y+5	; 0x05
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	31 f0       	breq	.+12     	; 0x21d4 <Increase_angle+0x2e>
    21c8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ca:	3d 81       	ldd	r19, Y+5	; 0x05
    21cc:	21 30       	cpi	r18, 0x01	; 1
    21ce:	31 05       	cpc	r19, r1
    21d0:	b1 f0       	breq	.+44     	; 0x21fe <Increase_angle+0x58>
    21d2:	2b c0       	rjmp	.+86     	; 0x222a <__stack+0x2b>
	case 0:
		duty_cycle_S1 = duty_cycle_S1 < 15? duty_cycle_S1 +1 : duty_cycle_S1;
    21d4:	80 91 0c 03 	lds	r24, 0x030C
    21d8:	8f 30       	cpi	r24, 0x0F	; 15
    21da:	30 f4       	brcc	.+12     	; 0x21e8 <Increase_angle+0x42>
    21dc:	80 91 0c 03 	lds	r24, 0x030C
    21e0:	38 2f       	mov	r19, r24
    21e2:	3f 5f       	subi	r19, 0xFF	; 255
    21e4:	3b 83       	std	Y+3, r19	; 0x03
    21e6:	03 c0       	rjmp	.+6      	; 0x21ee <Increase_angle+0x48>
    21e8:	80 91 0c 03 	lds	r24, 0x030C
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	90 93 0c 03 	sts	0x030C, r25
		TIMER0_voidFastPWM(duty_cycle_S1);
    21f4:	80 91 0c 03 	lds	r24, 0x030C
    21f8:	0e 94 aa 05 	call	0xb54	; 0xb54 <TIMER0_voidFastPWM>
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <__stack+0x2b>
		break;
	case 1:
		duty_cycle_S2 = duty_cycle_S2 < 15? duty_cycle_S2 +1 : duty_cycle_S2;
    21fe:	80 91 0d 03 	lds	r24, 0x030D
    2202:	8f 30       	cpi	r24, 0x0F	; 15
    2204:	30 f4       	brcc	.+12     	; 0x2212 <__stack+0x13>
    2206:	80 91 0d 03 	lds	r24, 0x030D
    220a:	28 2f       	mov	r18, r24
    220c:	2f 5f       	subi	r18, 0xFF	; 255
    220e:	2a 83       	std	Y+2, r18	; 0x02
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <__stack+0x19>
    2212:	30 91 0d 03 	lds	r19, 0x030D
    2216:	3a 83       	std	Y+2, r19	; 0x02
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	80 93 0d 03 	sts	0x030D, r24
		TIMER2_voidFastPWM(duty_cycle_S2);
    221e:	80 91 0d 03 	lds	r24, 0x030D
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 25 05 	call	0xa4a	; 0xa4a <TIMER2_voidFastPWM>
		break;
//	case 2:
//		TIMER2_voidFastPWM(duty_cycle, Channel_A2);
//		break;
	}
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <Decrease_angle>:


void Decrease_angle(servo_num ser_num)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	00 d0       	rcall	.+0      	; 0x2240 <Decrease_angle+0x6>
    2240:	0f 92       	push	r0
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	89 83       	std	Y+1, r24	; 0x01
	switch(ser_num){
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	3d 83       	std	Y+5, r19	; 0x05
    2252:	2c 83       	std	Y+4, r18	; 0x04
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	9d 81       	ldd	r25, Y+5	; 0x05
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	31 f0       	breq	.+12     	; 0x2268 <Decrease_angle+0x2e>
    225c:	2c 81       	ldd	r18, Y+4	; 0x04
    225e:	3d 81       	ldd	r19, Y+5	; 0x05
    2260:	21 30       	cpi	r18, 0x01	; 1
    2262:	31 05       	cpc	r19, r1
    2264:	b1 f0       	breq	.+44     	; 0x2292 <Decrease_angle+0x58>
    2266:	2b c0       	rjmp	.+86     	; 0x22be <Decrease_angle+0x84>
	case 0:
		duty_cycle_S1 = duty_cycle_S1 > 6? duty_cycle_S1 -1 : duty_cycle_S1;
    2268:	80 91 0c 03 	lds	r24, 0x030C
    226c:	87 30       	cpi	r24, 0x07	; 7
    226e:	30 f0       	brcs	.+12     	; 0x227c <Decrease_angle+0x42>
    2270:	80 91 0c 03 	lds	r24, 0x030C
    2274:	38 2f       	mov	r19, r24
    2276:	31 50       	subi	r19, 0x01	; 1
    2278:	3b 83       	std	Y+3, r19	; 0x03
    227a:	03 c0       	rjmp	.+6      	; 0x2282 <Decrease_angle+0x48>
    227c:	80 91 0c 03 	lds	r24, 0x030C
    2280:	8b 83       	std	Y+3, r24	; 0x03
    2282:	9b 81       	ldd	r25, Y+3	; 0x03
    2284:	90 93 0c 03 	sts	0x030C, r25
		TIMER0_voidFastPWM(duty_cycle_S1);
    2288:	80 91 0c 03 	lds	r24, 0x030C
    228c:	0e 94 aa 05 	call	0xb54	; 0xb54 <TIMER0_voidFastPWM>
    2290:	16 c0       	rjmp	.+44     	; 0x22be <Decrease_angle+0x84>
		break;
	case 1:
		duty_cycle_S2 = duty_cycle_S2 > 6? duty_cycle_S2 -1 : duty_cycle_S2;
    2292:	80 91 0d 03 	lds	r24, 0x030D
    2296:	87 30       	cpi	r24, 0x07	; 7
    2298:	30 f0       	brcs	.+12     	; 0x22a6 <Decrease_angle+0x6c>
    229a:	80 91 0d 03 	lds	r24, 0x030D
    229e:	28 2f       	mov	r18, r24
    22a0:	21 50       	subi	r18, 0x01	; 1
    22a2:	2a 83       	std	Y+2, r18	; 0x02
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <Decrease_angle+0x72>
    22a6:	30 91 0d 03 	lds	r19, 0x030D
    22aa:	3a 83       	std	Y+2, r19	; 0x02
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	80 93 0d 03 	sts	0x030D, r24
		TIMER2_voidFastPWM(duty_cycle_S2);
    22b2:	80 91 0d 03 	lds	r24, 0x030D
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 25 05 	call	0xa4a	; 0xa4a <TIMER2_voidFastPWM>
		break;
//	case 2:
//		TIMER2_voidFastPWM(duty_cycle, Channel_A2);
//		break;
	}
}
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <motor_init>:
PIN_Config_t pd1 = {OUTPUT, 1, 0, D};
PIN_Config_t pd2 = {OUTPUT, 2, 0, D};
PIN_Config_t pd3 = {OUTPUT, 3, 0, D};

void motor_init()
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <motor_init+0x6>
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62

	pin_init(&pd0);
    22da:	8e e0       	ldi	r24, 0x0E	; 14
    22dc:	93 e0       	ldi	r25, 0x03	; 3
    22de:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	pin_init(&pd1);
    22e2:	82 e1       	ldi	r24, 0x12	; 18
    22e4:	93 e0       	ldi	r25, 0x03	; 3
    22e6:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	pin_init(&pd2);
    22ea:	86 e1       	ldi	r24, 0x16	; 22
    22ec:	93 e0       	ldi	r25, 0x03	; 3
    22ee:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	pin_init(&pd3);
    22f2:	8a e1       	ldi	r24, 0x1A	; 26
    22f4:	93 e0       	ldi	r25, 0x03	; 3
    22f6:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	PIN_Config_t ph6 = {OUTPUT, 6, 0, H};
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	86 e0       	ldi	r24, 0x06	; 6
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	1b 82       	std	Y+3, r1	; 0x03
    2304:	87 e0       	ldi	r24, 0x07	; 7
    2306:	8c 83       	std	Y+4, r24	; 0x04
	pin_init(&ph6);
    2308:	ce 01       	movw	r24, r28
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	0e 94 ba 05 	call	0xb74	; 0xb74 <pin_init>
	TIMER2_voidInitializeTimer2();
    2310:	0e 94 ce 04 	call	0x99c	; 0x99c <TIMER2_voidInitializeTimer2>
}
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <motor_start>:

void motor_start(uint8_t speed, Direction dir)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	0f 92       	push	r0
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	6a 83       	std	Y+2, r22	; 0x02
	set_mspeed(speed);
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	0e 94 a4 11 	call	0x2348	; 0x2348 <set_mspeed>
	set_direction(dir);
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	0e 94 ae 11 	call	0x235c	; 0x235c <set_direction>
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <set_mspeed>:

void set_mspeed(uint8_t duty_cycle)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	0f 92       	push	r0
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	89 83       	std	Y+1, r24	; 0x01
	//TIMER2_voidFastPWM(duty_cycle, Channel_A2);
	//TIMER2_voidFastPWM(duty_cycle, Channel_B2);
}
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <set_direction>:

void set_direction(uint8_t dir)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <set_direction+0x6>
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	89 83       	std	Y+1, r24	; 0x01
	switch(dir)
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3b 83       	std	Y+3, r19	; 0x03
    2370:	2a 83       	std	Y+2, r18	; 0x02
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	59 f1       	breq	.+86     	; 0x23d2 <set_direction+0x76>
    237c:	2a 81       	ldd	r18, Y+2	; 0x02
    237e:	3b 81       	ldd	r19, Y+3	; 0x03
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	2c f4       	brge	.+10     	; 0x2390 <set_direction+0x34>
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	69 f0       	breq	.+26     	; 0x23a8 <set_direction+0x4c>
    238e:	66 c0       	rjmp	.+204    	; 0x245c <set_direction+0x100>
    2390:	2a 81       	ldd	r18, Y+2	; 0x02
    2392:	3b 81       	ldd	r19, Y+3	; 0x03
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	89 f1       	breq	.+98     	; 0x23fc <set_direction+0xa0>
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	9b 81       	ldd	r25, Y+3	; 0x03
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	91 05       	cpc	r25, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <set_direction+0x4a>
    23a4:	47 c0       	rjmp	.+142    	; 0x2434 <set_direction+0xd8>
    23a6:	5a c0       	rjmp	.+180    	; 0x245c <set_direction+0x100>
	{
	case Forward:
		pin_write(&pd0, 0);
    23a8:	8e e0       	ldi	r24, 0x0E	; 14
    23aa:	93 e0       	ldi	r25, 0x03	; 3
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	0e 94 46 0c 	call	0x188c	; 0x188c <pin_write>
		pin_write(&pd1, 1);
    23b2:	82 e1       	ldi	r24, 0x12	; 18
    23b4:	93 e0       	ldi	r25, 0x03	; 3
    23b6:	61 e0       	ldi	r22, 0x01	; 1
    23b8:	0e 94 46 0c 	call	0x188c	; 0x188c <pin_write>
		pin_write(&pd2, 0);
    23bc:	86 e1       	ldi	r24, 0x16	; 22
    23be:	93 e0       	ldi	r25, 0x03	; 3
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	0e 94 46 0c 	call	0x188c	; 0x188c <pin_write>
		pin_write(&pd3, 1);
    23c6:	8a e1       	ldi	r24, 0x1A	; 26
    23c8:	93 e0       	ldi	r25, 0x03	; 3
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	0e 94 46 0c 	call	0x188c	; 0x188c <pin_write>
    23d0:	45 c0       	rjmp	.+138    	; 0x245c <set_direction+0x100>
		break;
	case Backward:
		Write_Pin(D, 0, HIGH);
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 1, low);
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	61 e0       	ldi	r22, 0x01	; 1
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 2, HIGH);
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	62 e0       	ldi	r22, 0x02	; 2
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 3, low);
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	63 e0       	ldi	r22, 0x03	; 3
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
    23fa:	30 c0       	rjmp	.+96     	; 0x245c <set_direction+0x100>
		break;
	case Left:
		Write_Pin(D, 0, low);
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		SET_BIT(BASE_D, 1);
    2406:	ab e2       	ldi	r26, 0x2B	; 43
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	eb e2       	ldi	r30, 0x2B	; 43
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	82 60       	ori	r24, 0x02	; 2
    2412:	8c 93       	st	X, r24
		Write_Pin(D, 1, HIGH);
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 2, HIGH);
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 3, low);
    2428:	83 e0       	ldi	r24, 0x03	; 3
    242a:	63 e0       	ldi	r22, 0x03	; 3
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
    2432:	14 c0       	rjmp	.+40     	; 0x245c <set_direction+0x100>
		break;
	case Right:
		Write_Pin(D, 0, HIGH);
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 1, low);
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 2, low);
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		Write_Pin(D, 3, HIGH);
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
		break;
	}
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <motor_stop>:

void motor_stop()
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	Write_Pin(D, 0, low);
    2470:	83 e0       	ldi	r24, 0x03	; 3
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
	Write_Pin(D, 1, low);
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
	Write_Pin(D, 2, low);
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
	Write_Pin(D, 3, low);
    248e:	83 e0       	ldi	r24, 0x03	; 3
    2490:	63 e0       	ldi	r22, 0x03	; 3
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 46 0a 	call	0x148c	; 0x148c <Write_Pin>
}
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <LED_Init>:
#include "../../HAL/LED/LED.h"
typedef unsigned char         uint8_t;

#include "avr/io.h"

void LED_Init(){
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;
    24a6:	e1 e2       	ldi	r30, 0x21	; 33
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8f ef       	ldi	r24, 0xFF	; 255
    24ac:	80 83       	st	Z, r24
	PORTA = 0;
    24ae:	e2 e2       	ldi	r30, 0x22	; 34
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	10 82       	st	Z, r1
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <LED_ON>:

void LED_ON(){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	PORTA|= 1;
    24c2:	a2 e2       	ldi	r26, 0x22	; 34
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e2 e2       	ldi	r30, 0x22	; 34
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	81 60       	ori	r24, 0x01	; 1
    24ce:	8c 93       	st	X, r24

}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <LED_OFF>:
void LED_OFF(){
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~1;
    24de:	a2 e2       	ldi	r26, 0x22	; 34
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e2 e2       	ldi	r30, 0x22	; 34
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	8e 7f       	andi	r24, 0xFE	; 254
    24ea:	8c 93       	st	X, r24

}
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LED2_ON>:
void LED2_ON(){
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
	PORTA |= 2;
    24fa:	a2 e2       	ldi	r26, 0x22	; 34
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e2 e2       	ldi	r30, 0x22	; 34
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	82 60       	ori	r24, 0x02	; 2
    2506:	8c 93       	st	X, r24

}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <LED2_OFF>:
void LED2_OFF(){
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~(1<<2);
    2516:	a2 e2       	ldi	r26, 0x22	; 34
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e2 e2       	ldi	r30, 0x22	; 34
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8b 7f       	andi	r24, 0xFB	; 251
    2522:	8c 93       	st	X, r24

}
    2524:	cf 91       	pop	r28
    2526:	df 91       	pop	r29
    2528:	08 95       	ret

0000252a <Bluetooth_ISR>:
#include "../../MCAL/UART/uart.h"
#include "bluetooth.h"

extern uint8_t system_state;

void Bluetooth_ISR(){
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = USART_Receive();
    2534:	0e 94 8e 04 	call	0x91c	; 0x91c <USART_Receive>
    2538:	89 83       	std	Y+1, r24	; 0x01
	//20 is a magic number
	if(data == 20){
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	84 31       	cpi	r24, 0x14	; 20
    253e:	39 f4       	brne	.+14     	; 0x254e <Bluetooth_ISR+0x24>
		//switch system state & disable interrupt
		system_state ^= 1;
    2540:	80 91 1e 03 	lds	r24, 0x031E
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	89 27       	eor	r24, r25
    2548:	80 93 1e 03 	sts	0x031E, r24
		cli();
    254c:	f8 94       	cli

	}
}
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <HC05_init>:
void HC05_init(void)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
	//USART_Init();
	uart_start();
    255e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <uart_start>
	int_setCallBack(Bluetooth_ISR);
    2562:	85 e9       	ldi	r24, 0x95	; 149
    2564:	92 e1       	ldi	r25, 0x12	; 18
    2566:	0e 94 9d 04 	call	0x93a	; 0x93a <int_setCallBack>

}
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <Bluetooth_Read>:
char Bluetooth_Read(void)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	return USART_Receive();
    2578:	0e 94 8e 04 	call	0x91c	; 0x91c <USART_Receive>
}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <Bluetooth_Write>:


void Bluetooth_Write(unsigned char data)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	0f 92       	push	r0
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
	//USART_Transmit(data);
	uart_sendint(data);
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	0e 94 ff 03 	call	0x7fe	; 0x7fe <uart_sendint>
}
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <Bluetooth_Write_String>:

void Bluetooth_Write_String(char *str)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	0f 92       	push	r0
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	9a 83       	std	Y+2, r25	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <Bluetooth_Write_String+0x28>
  while(*str)
	{
		Bluetooth_Write(*(str++));
    25ae:	e9 81       	ldd	r30, Y+1	; 0x01
    25b0:	fa 81       	ldd	r31, Y+2	; 0x02
    25b2:	20 81       	ld	r18, Z
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	82 2f       	mov	r24, r18
    25c0:	0e 94 c1 12 	call	0x2582	; 0x2582 <Bluetooth_Write>
	uart_sendint(data);
}

void Bluetooth_Write_String(char *str)
{
  while(*str)
    25c4:	e9 81       	ldd	r30, Y+1	; 0x01
    25c6:	fa 81       	ldd	r31, Y+2	; 0x02
    25c8:	80 81       	ld	r24, Z
    25ca:	88 23       	and	r24, r24
    25cc:	81 f7       	brne	.-32     	; 0x25ae <Bluetooth_Write_String+0x12>
	{
		Bluetooth_Write(*(str++));
	}
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <MainApp>:
#include "robot.h"

uint8_t system_state = '1';


void MainApp(){
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <MainApp+0x6>
    25de:	0f 92       	push	r0
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
	HC05_init();
    25e6:	0e 94 ab 12 	call	0x2556	; 0x2556 <HC05_init>
	motor_init();
    25ea:	0e 94 67 11 	call	0x22ce	; 0x22ce <motor_init>
	Servo_Init();
    25ee:	0e 94 91 10 	call	0x2122	; 0x2122 <Servo_Init>

	uint8_t key ;
	while(1){

		switch(system_state){
    25f2:	80 91 1e 03 	lds	r24, 0x031E
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	3d 83       	std	Y+5, r19	; 0x05
    25fc:	2c 83       	std	Y+4, r18	; 0x04
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	9d 81       	ldd	r25, Y+5	; 0x05
    2602:	80 33       	cpi	r24, 0x30	; 48
    2604:	91 05       	cpc	r25, r1
    2606:	a9 f3       	breq	.-22     	; 0x25f2 <MainApp+0x1a>
    2608:	2c 81       	ldd	r18, Y+4	; 0x04
    260a:	3d 81       	ldd	r19, Y+5	; 0x05
    260c:	21 33       	cpi	r18, 0x31	; 49
    260e:	31 05       	cpc	r19, r1
    2610:	81 f7       	brne	.-32     	; 0x25f2 <MainApp+0x1a>
		case '0': //auto
			//enable interrupt
			//standby();
			break;
		case '1': // manual
			 key = Bluetooth_Read();
    2612:	0e 94 b8 12 	call	0x2570	; 0x2570 <Bluetooth_Read>
    2616:	89 83       	std	Y+1, r24	; 0x01
			 Bluetooth_Write(key);
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	0e 94 c1 12 	call	0x2582	; 0x2582 <Bluetooth_Write>
			switch(key){
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	3b 83       	std	Y+3, r19	; 0x03
    2626:	2a 83       	std	Y+2, r18	; 0x02
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	84 33       	cpi	r24, 0x34	; 52
    262e:	91 05       	cpc	r25, r1
    2630:	09 f4       	brne	.+2      	; 0x2634 <MainApp+0x5c>
    2632:	47 c0       	rjmp	.+142    	; 0x26c2 <MainApp+0xea>
    2634:	2a 81       	ldd	r18, Y+2	; 0x02
    2636:	3b 81       	ldd	r19, Y+3	; 0x03
    2638:	25 33       	cpi	r18, 0x35	; 53
    263a:	31 05       	cpc	r19, r1
    263c:	dc f4       	brge	.+54     	; 0x2674 <MainApp+0x9c>
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	81 33       	cpi	r24, 0x31	; 49
    2644:	91 05       	cpc	r25, r1
    2646:	81 f1       	breq	.+96     	; 0x26a8 <MainApp+0xd0>
    2648:	2a 81       	ldd	r18, Y+2	; 0x02
    264a:	3b 81       	ldd	r19, Y+3	; 0x03
    264c:	22 33       	cpi	r18, 0x32	; 50
    264e:	31 05       	cpc	r19, r1
    2650:	34 f4       	brge	.+12     	; 0x265e <MainApp+0x86>
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	9b 81       	ldd	r25, Y+3	; 0x03
    2656:	80 33       	cpi	r24, 0x30	; 48
    2658:	91 05       	cpc	r25, r1
    265a:	09 f1       	breq	.+66     	; 0x269e <MainApp+0xc6>
    265c:	ca cf       	rjmp	.-108    	; 0x25f2 <MainApp+0x1a>
    265e:	2a 81       	ldd	r18, Y+2	; 0x02
    2660:	3b 81       	ldd	r19, Y+3	; 0x03
    2662:	22 33       	cpi	r18, 0x32	; 50
    2664:	31 05       	cpc	r19, r1
    2666:	29 f1       	breq	.+74     	; 0x26b2 <MainApp+0xda>
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	83 33       	cpi	r24, 0x33	; 51
    266e:	91 05       	cpc	r25, r1
    2670:	29 f1       	breq	.+74     	; 0x26bc <MainApp+0xe4>
    2672:	bf cf       	rjmp	.-130    	; 0x25f2 <MainApp+0x1a>
    2674:	2a 81       	ldd	r18, Y+2	; 0x02
    2676:	3b 81       	ldd	r19, Y+3	; 0x03
    2678:	26 33       	cpi	r18, 0x36	; 54
    267a:	31 05       	cpc	r19, r1
    267c:	51 f1       	breq	.+84     	; 0x26d2 <MainApp+0xfa>
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	86 33       	cpi	r24, 0x36	; 54
    2684:	91 05       	cpc	r25, r1
    2686:	0c f1       	brlt	.+66     	; 0x26ca <MainApp+0xf2>
    2688:	2a 81       	ldd	r18, Y+2	; 0x02
    268a:	3b 81       	ldd	r19, Y+3	; 0x03
    268c:	27 33       	cpi	r18, 0x37	; 55
    268e:	31 05       	cpc	r19, r1
    2690:	21 f1       	breq	.+72     	; 0x26da <MainApp+0x102>
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	9b 81       	ldd	r25, Y+3	; 0x03
    2696:	88 33       	cpi	r24, 0x38	; 56
    2698:	91 05       	cpc	r25, r1
    269a:	19 f1       	breq	.+70     	; 0x26e2 <MainApp+0x10a>
    269c:	aa cf       	rjmp	.-172    	; 0x25f2 <MainApp+0x1a>
			case '0':
				motor_start(50, Forward);
    269e:	82 e3       	ldi	r24, 0x32	; 50
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	0e 94 91 11 	call	0x2322	; 0x2322 <motor_start>
    26a6:	a5 cf       	rjmp	.-182    	; 0x25f2 <MainApp+0x1a>
				break;
			case '1':
				motor_start(50, Right);
    26a8:	82 e3       	ldi	r24, 0x32	; 50
    26aa:	63 e0       	ldi	r22, 0x03	; 3
    26ac:	0e 94 91 11 	call	0x2322	; 0x2322 <motor_start>
    26b0:	a0 cf       	rjmp	.-192    	; 0x25f2 <MainApp+0x1a>
				break;
			case '2':
				motor_start(50, Left);
    26b2:	82 e3       	ldi	r24, 0x32	; 50
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	0e 94 91 11 	call	0x2322	; 0x2322 <motor_start>
    26ba:	9b cf       	rjmp	.-202    	; 0x25f2 <MainApp+0x1a>

				break;
			case '3':
				motor_stop();
    26bc:	0e 94 34 12 	call	0x2468	; 0x2468 <motor_stop>
    26c0:	98 cf       	rjmp	.-208    	; 0x25f2 <MainApp+0x1a>
				break;

			case '4'://switch to auto state
				//call fn to enable uart interrupt "will be done ISA :("
				system_state = 0;
    26c2:	10 92 1e 03 	sts	0x031E, r1
				sei();
    26c6:	78 94       	sei
    26c8:	94 cf       	rjmp	.-216    	; 0x25f2 <MainApp+0x1a>
				break;
			//4 cases for servo
			case '5':
				Increase_angle(S1);
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Increase_angle>
    26d0:	90 cf       	rjmp	.-224    	; 0x25f2 <MainApp+0x1a>
				break;
			case '6':
				Decrease_angle(S1);
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	0e 94 1d 11 	call	0x223a	; 0x223a <Decrease_angle>
    26d8:	8c cf       	rjmp	.-232    	; 0x25f2 <MainApp+0x1a>
				break;
			case '7':
				Increase_angle(S2);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <Increase_angle>
    26e0:	88 cf       	rjmp	.-240    	; 0x25f2 <MainApp+0x1a>
				break;
			case '8':
				Decrease_angle(S2);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 1d 11 	call	0x223a	; 0x223a <Decrease_angle>
    26e8:	84 cf       	rjmp	.-248    	; 0x25f2 <MainApp+0x1a>

000026ea <op>:
#include "../../HAL/LED/LED.h"
#include "../../MCAL/Timer/Timer2/Timer2_Interface.h"
#include "test_dio.h"


void op(){
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
	LED_ON();
    26f2:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LED_ON>
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <test_dio>:

void test_dio(){
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	ff cf       	rjmp	.-2      	; 0x2704 <test_dio+0x8>

00002706 <Delay>:
#include "../../HAL/LED/LED.h"
#include "app1.h"
#include "../../MCAL/UART/uart.h"

void Delay(unsigned long counter)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	28 97       	sbiw	r28, 0x08	; 8
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	6d 83       	std	Y+5, r22	; 0x05
    271c:	7e 83       	std	Y+6, r23	; 0x06
    271e:	8f 83       	std	Y+7, r24	; 0x07
    2720:	98 87       	std	Y+8, r25	; 0x08
	unsigned long i = 0;
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	1a 82       	std	Y+2, r1	; 0x02
    2726:	1b 82       	std	Y+3, r1	; 0x03
    2728:	1c 82       	std	Y+4, r1	; 0x04

	for(i=0; i< counter; i++);
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	1a 82       	std	Y+2, r1	; 0x02
    272e:	1b 82       	std	Y+3, r1	; 0x03
    2730:	1c 82       	std	Y+4, r1	; 0x04
    2732:	0b c0       	rjmp	.+22     	; 0x274a <Delay+0x44>
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	ab 81       	ldd	r26, Y+3	; 0x03
    273a:	bc 81       	ldd	r27, Y+4	; 0x04
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	a1 1d       	adc	r26, r1
    2740:	b1 1d       	adc	r27, r1
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	ab 83       	std	Y+3, r26	; 0x03
    2748:	bc 83       	std	Y+4, r27	; 0x04
    274a:	29 81       	ldd	r18, Y+1	; 0x01
    274c:	3a 81       	ldd	r19, Y+2	; 0x02
    274e:	4b 81       	ldd	r20, Y+3	; 0x03
    2750:	5c 81       	ldd	r21, Y+4	; 0x04
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	af 81       	ldd	r26, Y+7	; 0x07
    2758:	b8 85       	ldd	r27, Y+8	; 0x08
    275a:	28 17       	cp	r18, r24
    275c:	39 07       	cpc	r19, r25
    275e:	4a 07       	cpc	r20, r26
    2760:	5b 07       	cpc	r21, r27
    2762:	40 f3       	brcs	.-48     	; 0x2734 <Delay+0x2e>
}
    2764:	28 96       	adiw	r28, 0x08	; 8
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <Test_Bluetooth>:

void Test_Bluetooth(void){
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	0f 92       	push	r0
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
	HC05_init();
    2780:	0e 94 ab 12 	call	0x2556	; 0x2556 <HC05_init>
	//uart_start();
	LED_Init();
    2784:	0e 94 4f 12 	call	0x249e	; 0x249e <LED_Init>
	unsigned char d = 'b';
    2788:	82 e6       	ldi	r24, 0x62	; 98
    278a:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		d= Bluetooth_Read();
    278c:	0e 94 b8 12 	call	0x2570	; 0x2570 <Bluetooth_Read>
    2790:	89 83       	std	Y+1, r24	; 0x01
		Delay(100);
    2792:	64 e6       	ldi	r22, 0x64	; 100
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 83 13 	call	0x2706	; 0x2706 <Delay>
		Bluetooth_Write(d);
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	0e 94 c1 12 	call	0x2582	; 0x2582 <Bluetooth_Write>

		if(d == 'o'){
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	8f 36       	cpi	r24, 0x6F	; 111
    27a8:	19 f4       	brne	.+6      	; 0x27b0 <Test_Bluetooth+0x3a>
			LED_ON();
    27aa:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LED_ON>
    27ae:	ee cf       	rjmp	.-36     	; 0x278c <Test_Bluetooth+0x16>
		}
		else{
			LED_OFF();
    27b0:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <LED_OFF>
    27b4:	eb cf       	rjmp	.-42     	; 0x278c <Test_Bluetooth+0x16>

000027b6 <testadc>:
#include "../../MCAL/ADC/adc.h"
#include "../../HAL/LED/LED.h"
#include "../../HAL/Bluetooth/bluetooth.h"
#include <stdlib.h>

void testadc(){
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	2b 97       	sbiw	r28, 0x0b	; 11
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
	int sen1=0;
    27ca:	1e 82       	std	Y+6, r1	; 0x06
    27cc:	1d 82       	std	Y+5, r1	; 0x05
	int sen2=0, sen3=0;
    27ce:	1c 82       	std	Y+4, r1	; 0x04
    27d0:	1b 82       	std	Y+3, r1	; 0x03
    27d2:	1a 82       	std	Y+2, r1	; 0x02
    27d4:	19 82       	std	Y+1, r1	; 0x01
	ADC_init();
    27d6:	0e 94 20 10 	call	0x2040	; 0x2040 <ADC_init>
	LED_Init();
    27da:	0e 94 4f 12 	call	0x249e	; 0x249e <LED_Init>
	HC05_init();
    27de:	0e 94 ab 12 	call	0x2556	; 0x2556 <HC05_init>
	char String[5];
	while(1){
		ADC_readChannel(0);
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 3c 10 	call	0x2078	; 0x2078 <ADC_readChannel>
		sen1 = ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    27e8:	80 91 26 03 	lds	r24, 0x0326
    27ec:	90 91 27 03 	lds	r25, 0x0327
    27f0:	cc 01       	movw	r24, r24
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	2e ee       	ldi	r18, 0xEE	; 238
    27f8:	32 e0       	ldi	r19, 0x02	; 2
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 c6 14 	call	0x298c	; 0x298c <__mulsi3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 95 01 	call	0x32a	; 0x32a <__floatunsisf>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 ed       	ldi	r19, 0xD0	; 208
    281e:	4f eb       	ldi	r20, 0xBF	; 191
    2820:	54 e4       	ldi	r21, 0x44	; 68
    2822:	0e 94 95 00 	call	0x12a	; 0x12a <__divsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 41 01 	call	0x282	; 0x282 <__fixsfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
		itoa(sen1,String,10);	/* Integer to string conversion */
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	9e 01       	movw	r18, r28
    2840:	29 5f       	subi	r18, 0xF9	; 249
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	b9 01       	movw	r22, r18
    2846:	4a e0       	ldi	r20, 0x0A	; 10
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <itoa>
		Bluetooth_Write_String(String);
    284e:	ce 01       	movw	r24, r28
    2850:	07 96       	adiw	r24, 0x07	; 7
    2852:	0e 94 ce 12 	call	0x259c	; 0x259c <Bluetooth_Write_String>
		Bluetooth_Write('-');
    2856:	8d e2       	ldi	r24, 0x2D	; 45
    2858:	0e 94 c1 12 	call	0x2582	; 0x2582 <Bluetooth_Write>
		ADC_readChannel(1);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	0e 94 3c 10 	call	0x2078	; 0x2078 <ADC_readChannel>
		sen2= ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    2862:	80 91 26 03 	lds	r24, 0x0326
    2866:	90 91 27 03 	lds	r25, 0x0327
    286a:	cc 01       	movw	r24, r24
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	2e ee       	ldi	r18, 0xEE	; 238
    2872:	32 e0       	ldi	r19, 0x02	; 2
    2874:	40 e0       	ldi	r20, 0x00	; 0
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	bc 01       	movw	r22, r24
    287a:	cd 01       	movw	r24, r26
    287c:	0e 94 c6 14 	call	0x298c	; 0x298c <__mulsi3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 95 01 	call	0x32a	; 0x32a <__floatunsisf>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 ed       	ldi	r19, 0xD0	; 208
    2898:	4f eb       	ldi	r20, 0xBF	; 191
    289a:	54 e4       	ldi	r21, 0x44	; 68
    289c:	0e 94 95 00 	call	0x12a	; 0x12a <__divsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 41 01 	call	0x282	; 0x282 <__fixsfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
		itoa(sen2,String,10);	/* Integer to string conversion */
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	9c 81       	ldd	r25, Y+4	; 0x04
    28b8:	9e 01       	movw	r18, r28
    28ba:	29 5f       	subi	r18, 0xF9	; 249
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	b9 01       	movw	r22, r18
    28c0:	4a e0       	ldi	r20, 0x0A	; 10
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <itoa>
		Bluetooth_Write_String(String);
    28c8:	ce 01       	movw	r24, r28
    28ca:	07 96       	adiw	r24, 0x07	; 7
    28cc:	0e 94 ce 12 	call	0x259c	; 0x259c <Bluetooth_Write_String>
		Bluetooth_Write('-');
    28d0:	8d e2       	ldi	r24, 0x2D	; 45
    28d2:	0e 94 c1 12 	call	0x2582	; 0x2582 <Bluetooth_Write>
		ADC_readChannel(2);
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	0e 94 3c 10 	call	0x2078	; 0x2078 <ADC_readChannel>
		sen3= ((uint32_t)g_adcResult*150*5)/(1023*1.5);
    28dc:	80 91 26 03 	lds	r24, 0x0326
    28e0:	90 91 27 03 	lds	r25, 0x0327
    28e4:	cc 01       	movw	r24, r24
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	2e ee       	ldi	r18, 0xEE	; 238
    28ec:	32 e0       	ldi	r19, 0x02	; 2
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 c6 14 	call	0x298c	; 0x298c <__mulsi3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 95 01 	call	0x32a	; 0x32a <__floatunsisf>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 ed       	ldi	r19, 0xD0	; 208
    2912:	4f eb       	ldi	r20, 0xBF	; 191
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 95 00 	call	0x12a	; 0x12a <__divsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 41 01 	call	0x282	; 0x282 <__fixsfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9a 83       	std	Y+2, r25	; 0x02
    292c:	89 83       	std	Y+1, r24	; 0x01
		itoa(sen3,String,10);	/* Integer to string conversion */
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	9e 01       	movw	r18, r28
    2934:	29 5f       	subi	r18, 0xF9	; 249
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	b9 01       	movw	r22, r18
    293a:	4a e0       	ldi	r20, 0x0A	; 10
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <itoa>
		Bluetooth_Write_String(String);
    2942:	ce 01       	movw	r24, r28
    2944:	07 96       	adiw	r24, 0x07	; 7
    2946:	0e 94 ce 12 	call	0x259c	; 0x259c <Bluetooth_Write_String>
		Bluetooth_Write('\r');
    294a:	8d e0       	ldi	r24, 0x0D	; 13
    294c:	0e 94 c1 12 	call	0x2582	; 0x2582 <Bluetooth_Write>
		if(sen1){
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	19 f0       	breq	.+6      	; 0x295e <testadc+0x1a8>
			LED_ON();
    2958:	0e 94 5d 12 	call	0x24ba	; 0x24ba <LED_ON>
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <testadc+0x1ac>
		}else{
			LED_OFF();
    295e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <LED_OFF>
		}
		if(sen2){
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	19 f0       	breq	.+6      	; 0x2970 <testadc+0x1ba>
			LED2_ON();
    296a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LED2_ON>
    296e:	39 cf       	rjmp	.-398    	; 0x27e2 <testadc+0x2c>

		}else{
			LED2_OFF();
    2970:	0e 94 87 12 	call	0x250e	; 0x250e <LED2_OFF>
    2974:	36 cf       	rjmp	.-404    	; 0x27e2 <testadc+0x2c>

00002976 <main>:
#include "HAL/Motor/motors.h"

//#include "MCAL/UART/uart.h"
//#include "ECUAL/LED/LED.h"

int main(){
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
	MainApp();
    297e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <MainApp>
	return  0;
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
}
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <__mulsi3>:
    298c:	62 9f       	mul	r22, r18
    298e:	d0 01       	movw	r26, r0
    2990:	73 9f       	mul	r23, r19
    2992:	f0 01       	movw	r30, r0
    2994:	82 9f       	mul	r24, r18
    2996:	e0 0d       	add	r30, r0
    2998:	f1 1d       	adc	r31, r1
    299a:	64 9f       	mul	r22, r20
    299c:	e0 0d       	add	r30, r0
    299e:	f1 1d       	adc	r31, r1
    29a0:	92 9f       	mul	r25, r18
    29a2:	f0 0d       	add	r31, r0
    29a4:	83 9f       	mul	r24, r19
    29a6:	f0 0d       	add	r31, r0
    29a8:	74 9f       	mul	r23, r20
    29aa:	f0 0d       	add	r31, r0
    29ac:	65 9f       	mul	r22, r21
    29ae:	f0 0d       	add	r31, r0
    29b0:	99 27       	eor	r25, r25
    29b2:	72 9f       	mul	r23, r18
    29b4:	b0 0d       	add	r27, r0
    29b6:	e1 1d       	adc	r30, r1
    29b8:	f9 1f       	adc	r31, r25
    29ba:	63 9f       	mul	r22, r19
    29bc:	b0 0d       	add	r27, r0
    29be:	e1 1d       	adc	r30, r1
    29c0:	f9 1f       	adc	r31, r25
    29c2:	bd 01       	movw	r22, r26
    29c4:	cf 01       	movw	r24, r30
    29c6:	11 24       	eor	r1, r1
    29c8:	08 95       	ret

000029ca <__prologue_saves__>:
    29ca:	2f 92       	push	r2
    29cc:	3f 92       	push	r3
    29ce:	4f 92       	push	r4
    29d0:	5f 92       	push	r5
    29d2:	6f 92       	push	r6
    29d4:	7f 92       	push	r7
    29d6:	8f 92       	push	r8
    29d8:	9f 92       	push	r9
    29da:	af 92       	push	r10
    29dc:	bf 92       	push	r11
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	ca 1b       	sub	r28, r26
    29f4:	db 0b       	sbc	r29, r27
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	19 94       	eijmp

00002a02 <__epilogue_restores__>:
    2a02:	2a 88       	ldd	r2, Y+18	; 0x12
    2a04:	39 88       	ldd	r3, Y+17	; 0x11
    2a06:	48 88       	ldd	r4, Y+16	; 0x10
    2a08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a14:	b9 84       	ldd	r11, Y+9	; 0x09
    2a16:	c8 84       	ldd	r12, Y+8	; 0x08
    2a18:	df 80       	ldd	r13, Y+7	; 0x07
    2a1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a20:	1b 81       	ldd	r17, Y+3	; 0x03
    2a22:	aa 81       	ldd	r26, Y+2	; 0x02
    2a24:	b9 81       	ldd	r27, Y+1	; 0x01
    2a26:	ce 0f       	add	r28, r30
    2a28:	d1 1d       	adc	r29, r1
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	ed 01       	movw	r28, r26
    2a36:	08 95       	ret

00002a38 <itoa>:
    2a38:	fb 01       	movw	r30, r22
    2a3a:	9f 01       	movw	r18, r30
    2a3c:	e8 94       	clt
    2a3e:	42 30       	cpi	r20, 0x02	; 2
    2a40:	c4 f0       	brlt	.+48     	; 0x2a72 <itoa+0x3a>
    2a42:	45 32       	cpi	r20, 0x25	; 37
    2a44:	b4 f4       	brge	.+44     	; 0x2a72 <itoa+0x3a>
    2a46:	4a 30       	cpi	r20, 0x0A	; 10
    2a48:	29 f4       	brne	.+10     	; 0x2a54 <itoa+0x1c>
    2a4a:	97 fb       	bst	r25, 7
    2a4c:	1e f4       	brtc	.+6      	; 0x2a54 <itoa+0x1c>
    2a4e:	90 95       	com	r25
    2a50:	81 95       	neg	r24
    2a52:	9f 4f       	sbci	r25, 0xFF	; 255
    2a54:	64 2f       	mov	r22, r20
    2a56:	77 27       	eor	r23, r23
    2a58:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    2a5c:	80 5d       	subi	r24, 0xD0	; 208
    2a5e:	8a 33       	cpi	r24, 0x3A	; 58
    2a60:	0c f0       	brlt	.+2      	; 0x2a64 <itoa+0x2c>
    2a62:	89 5d       	subi	r24, 0xD9	; 217
    2a64:	81 93       	st	Z+, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	a1 f7       	brne	.-24     	; 0x2a54 <itoa+0x1c>
    2a6c:	16 f4       	brtc	.+4      	; 0x2a72 <itoa+0x3a>
    2a6e:	5d e2       	ldi	r21, 0x2D	; 45
    2a70:	51 93       	st	Z+, r21
    2a72:	10 82       	st	Z, r1
    2a74:	c9 01       	movw	r24, r18
    2a76:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <strrev>

00002a7a <strrev>:
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	67 2f       	mov	r22, r23
    2a80:	71 91       	ld	r23, Z+
    2a82:	77 23       	and	r23, r23
    2a84:	e1 f7       	brne	.-8      	; 0x2a7e <strrev+0x4>
    2a86:	32 97       	sbiw	r30, 0x02	; 2
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <strrev+0x18>
    2a8a:	7c 91       	ld	r23, X
    2a8c:	6d 93       	st	X+, r22
    2a8e:	70 83       	st	Z, r23
    2a90:	62 91       	ld	r22, -Z
    2a92:	ae 17       	cp	r26, r30
    2a94:	bf 07       	cpc	r27, r31
    2a96:	c8 f3       	brcs	.-14     	; 0x2a8a <strrev+0x10>
    2a98:	08 95       	ret

00002a9a <__udivmodhi4>:
    2a9a:	aa 1b       	sub	r26, r26
    2a9c:	bb 1b       	sub	r27, r27
    2a9e:	51 e1       	ldi	r21, 0x11	; 17
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <__udivmodhi4_ep>

00002aa2 <__udivmodhi4_loop>:
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	a6 17       	cp	r26, r22
    2aa8:	b7 07       	cpc	r27, r23
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <__udivmodhi4_ep>
    2aac:	a6 1b       	sub	r26, r22
    2aae:	b7 0b       	sbc	r27, r23

00002ab0 <__udivmodhi4_ep>:
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	5a 95       	dec	r21
    2ab6:	a9 f7       	brne	.-22     	; 0x2aa2 <__udivmodhi4_loop>
    2ab8:	80 95       	com	r24
    2aba:	90 95       	com	r25
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	08 95       	ret

00002ac2 <_exit>:
    2ac2:	f8 94       	cli

00002ac4 <__stop_program>:
    2ac4:	ff cf       	rjmp	.-2      	; 0x2ac4 <__stop_program>
